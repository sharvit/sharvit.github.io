/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {
  type Maybe<T> = T | null;
  type InputMaybe<T> = T | null;
  type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
  type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
  };
  type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
  };
  /** All built-in and custom scalars, mapped to their actual values */
  type Scalars = {
    /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
    ID: string;
    /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
    String: string;
    /** The `Boolean` scalar type represents `true` or `false`. */
    Boolean: boolean;
    /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
    Int: number;
    /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
    Float: number;
    /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
    Date: string;
    GatsbyImageData: import("gatsby-plugin-image").IGatsbyImageData;
    /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
    JSON: Record<string, unknown>;
  };

  type AVIFOptions = {
    readonly lossless: InputMaybe<Scalars["Boolean"]>;
    readonly quality: InputMaybe<Scalars["Int"]>;
    readonly speed: InputMaybe<Scalars["Int"]>;
  };

  type BlurredOptions = {
    /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
    readonly toFormat: InputMaybe<ImageFormat>;
    /** Width of the generated low-res preview. Default is 20px */
    readonly width: InputMaybe<Scalars["Int"]>;
  };

  type BooleanQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["Boolean"]>;
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Boolean"]>>>;
    readonly ne: InputMaybe<Scalars["Boolean"]>;
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Boolean"]>>>;
  };

  type DateQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["Date"]>;
    readonly gt: InputMaybe<Scalars["Date"]>;
    readonly gte: InputMaybe<Scalars["Date"]>;
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Date"]>>>;
    readonly lt: InputMaybe<Scalars["Date"]>;
    readonly lte: InputMaybe<Scalars["Date"]>;
    readonly ne: InputMaybe<Scalars["Date"]>;
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Date"]>>>;
  };

  type Directory = Node & {
    readonly absolutePath: Scalars["String"];
    readonly accessTime: Scalars["Date"];
    readonly atime: Scalars["Date"];
    readonly atimeMs: Scalars["Float"];
    readonly base: Scalars["String"];
    readonly birthTime: Scalars["Date"];
    /** @deprecated Use `birthTime` instead */
    readonly birthtime: Maybe<Scalars["Date"]>;
    /** @deprecated Use `birthTime` instead */
    readonly birthtimeMs: Maybe<Scalars["Float"]>;
    readonly changeTime: Scalars["Date"];
    readonly children: ReadonlyArray<Node>;
    readonly ctime: Scalars["Date"];
    readonly ctimeMs: Scalars["Float"];
    readonly dev: Scalars["Int"];
    readonly dir: Scalars["String"];
    readonly ext: Scalars["String"];
    readonly extension: Scalars["String"];
    readonly gid: Scalars["Int"];
    readonly id: Scalars["ID"];
    readonly ino: Scalars["Float"];
    readonly internal: Internal;
    readonly mode: Scalars["Int"];
    readonly modifiedTime: Scalars["Date"];
    readonly mtime: Scalars["Date"];
    readonly mtimeMs: Scalars["Float"];
    readonly name: Scalars["String"];
    readonly nlink: Scalars["Int"];
    readonly parent: Maybe<Node>;
    readonly prettySize: Scalars["String"];
    readonly rdev: Scalars["Int"];
    readonly relativeDirectory: Scalars["String"];
    readonly relativePath: Scalars["String"];
    readonly root: Scalars["String"];
    readonly size: Scalars["Int"];
    readonly sourceInstanceName: Scalars["String"];
    readonly uid: Scalars["Int"];
  };

  type Directory_accessTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_atimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_birthTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_changeTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_ctimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_modifiedTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type Directory_mtimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type DirectoryConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<DirectoryEdge>;
    readonly group: ReadonlyArray<DirectoryGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<Directory>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type DirectoryConnection_distinctArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryConnection_groupArgs = {
    field: DirectoryFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type DirectoryConnection_maxArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryConnection_minArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryConnection_sumArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryEdge = {
    readonly next: Maybe<Directory>;
    readonly node: Directory;
    readonly previous: Maybe<Directory>;
  };

  type DirectoryFieldsEnum =
    | "absolutePath"
    | "accessTime"
    | "atime"
    | "atimeMs"
    | "base"
    | "birthTime"
    | "birthtime"
    | "birthtimeMs"
    | "changeTime"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "ctime"
    | "ctimeMs"
    | "dev"
    | "dir"
    | "ext"
    | "extension"
    | "gid"
    | "id"
    | "ino"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "mode"
    | "modifiedTime"
    | "mtime"
    | "mtimeMs"
    | "name"
    | "nlink"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "prettySize"
    | "rdev"
    | "relativeDirectory"
    | "relativePath"
    | "root"
    | "size"
    | "sourceInstanceName"
    | "uid";

  type DirectoryFilterInput = {
    readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
    readonly accessTime: InputMaybe<DateQueryOperatorInput>;
    readonly atime: InputMaybe<DateQueryOperatorInput>;
    readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly base: InputMaybe<StringQueryOperatorInput>;
    readonly birthTime: InputMaybe<DateQueryOperatorInput>;
    readonly birthtime: InputMaybe<DateQueryOperatorInput>;
    readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly changeTime: InputMaybe<DateQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly ctime: InputMaybe<DateQueryOperatorInput>;
    readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly dev: InputMaybe<IntQueryOperatorInput>;
    readonly dir: InputMaybe<StringQueryOperatorInput>;
    readonly ext: InputMaybe<StringQueryOperatorInput>;
    readonly extension: InputMaybe<StringQueryOperatorInput>;
    readonly gid: InputMaybe<IntQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly ino: InputMaybe<FloatQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly mode: InputMaybe<IntQueryOperatorInput>;
    readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
    readonly mtime: InputMaybe<DateQueryOperatorInput>;
    readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly nlink: InputMaybe<IntQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly prettySize: InputMaybe<StringQueryOperatorInput>;
    readonly rdev: InputMaybe<IntQueryOperatorInput>;
    readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
    readonly relativePath: InputMaybe<StringQueryOperatorInput>;
    readonly root: InputMaybe<StringQueryOperatorInput>;
    readonly size: InputMaybe<IntQueryOperatorInput>;
    readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
    readonly uid: InputMaybe<IntQueryOperatorInput>;
  };

  type DirectoryGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<DirectoryEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<DirectoryGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<Directory>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type DirectoryGroupConnection_distinctArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryGroupConnection_groupArgs = {
    field: DirectoryFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type DirectoryGroupConnection_maxArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryGroupConnection_minArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectoryGroupConnection_sumArgs = {
    field: DirectoryFieldsEnum;
  };

  type DirectorySortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type DuotoneGradient = {
    readonly highlight: Scalars["String"];
    readonly opacity: InputMaybe<Scalars["Int"]>;
    readonly shadow: Scalars["String"];
  };

  type File = Node & {
    readonly absolutePath: Scalars["String"];
    readonly accessTime: Scalars["Date"];
    readonly atime: Scalars["Date"];
    readonly atimeMs: Scalars["Float"];
    readonly base: Scalars["String"];
    readonly birthTime: Scalars["Date"];
    /** @deprecated Use `birthTime` instead */
    readonly birthtime: Maybe<Scalars["Date"]>;
    /** @deprecated Use `birthTime` instead */
    readonly birthtimeMs: Maybe<Scalars["Float"]>;
    readonly blksize: Maybe<Scalars["Int"]>;
    readonly blocks: Maybe<Scalars["Int"]>;
    readonly changeTime: Scalars["Date"];
    /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
    readonly childImageSharp: Maybe<ImageSharp>;
    /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
    readonly childMarkdownRemark: Maybe<MarkdownRemark>;
    /** Returns the first child node of type Yaml or null if there are no children of given type on this node */
    readonly childYaml: Maybe<Yaml>;
    readonly children: ReadonlyArray<Node>;
    /** Returns all children nodes filtered by type ImageSharp */
    readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
    /** Returns all children nodes filtered by type MarkdownRemark */
    readonly childrenMarkdownRemark: Maybe<
      ReadonlyArray<Maybe<MarkdownRemark>>
    >;
    /** Returns all children nodes filtered by type Yaml */
    readonly childrenYaml: Maybe<ReadonlyArray<Maybe<Yaml>>>;
    readonly ctime: Scalars["Date"];
    readonly ctimeMs: Scalars["Float"];
    readonly dev: Scalars["Int"];
    readonly dir: Scalars["String"];
    readonly ext: Scalars["String"];
    readonly extension: Scalars["String"];
    readonly gid: Scalars["Int"];
    readonly id: Scalars["ID"];
    readonly ino: Scalars["Float"];
    readonly internal: Internal;
    readonly mode: Scalars["Int"];
    readonly modifiedTime: Scalars["Date"];
    readonly mtime: Scalars["Date"];
    readonly mtimeMs: Scalars["Float"];
    readonly name: Scalars["String"];
    readonly nlink: Scalars["Int"];
    readonly parent: Maybe<Node>;
    readonly prettySize: Scalars["String"];
    /** Copy file to static directory and return public url to it */
    readonly publicURL: Maybe<Scalars["String"]>;
    readonly rdev: Scalars["Int"];
    readonly relativeDirectory: Scalars["String"];
    readonly relativePath: Scalars["String"];
    readonly root: Scalars["String"];
    readonly size: Scalars["Int"];
    readonly sourceInstanceName: Scalars["String"];
    readonly uid: Scalars["Int"];
  };

  type File_accessTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_atimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_birthTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_changeTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_ctimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_modifiedTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type File_mtimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type FileConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<FileEdge>;
    readonly group: ReadonlyArray<FileGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<File>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type FileConnection_distinctArgs = {
    field: FileFieldsEnum;
  };

  type FileConnection_groupArgs = {
    field: FileFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type FileConnection_maxArgs = {
    field: FileFieldsEnum;
  };

  type FileConnection_minArgs = {
    field: FileFieldsEnum;
  };

  type FileConnection_sumArgs = {
    field: FileFieldsEnum;
  };

  type FileEdge = {
    readonly next: Maybe<File>;
    readonly node: File;
    readonly previous: Maybe<File>;
  };

  type FileFieldsEnum =
    | "absolutePath"
    | "accessTime"
    | "atime"
    | "atimeMs"
    | "base"
    | "birthTime"
    | "birthtime"
    | "birthtimeMs"
    | "blksize"
    | "blocks"
    | "changeTime"
    | "childImageSharp.children"
    | "childImageSharp.children.children"
    | "childImageSharp.children.children.children"
    | "childImageSharp.children.children.id"
    | "childImageSharp.children.id"
    | "childImageSharp.children.internal.content"
    | "childImageSharp.children.internal.contentDigest"
    | "childImageSharp.children.internal.contentFilePath"
    | "childImageSharp.children.internal.description"
    | "childImageSharp.children.internal.fieldOwners"
    | "childImageSharp.children.internal.ignoreType"
    | "childImageSharp.children.internal.mediaType"
    | "childImageSharp.children.internal.owner"
    | "childImageSharp.children.internal.type"
    | "childImageSharp.children.parent.children"
    | "childImageSharp.children.parent.id"
    | "childImageSharp.fixed.aspectRatio"
    | "childImageSharp.fixed.base64"
    | "childImageSharp.fixed.height"
    | "childImageSharp.fixed.originalName"
    | "childImageSharp.fixed.src"
    | "childImageSharp.fixed.srcSet"
    | "childImageSharp.fixed.srcSetWebp"
    | "childImageSharp.fixed.srcWebp"
    | "childImageSharp.fixed.tracedSVG"
    | "childImageSharp.fixed.width"
    | "childImageSharp.fluid.aspectRatio"
    | "childImageSharp.fluid.base64"
    | "childImageSharp.fluid.originalImg"
    | "childImageSharp.fluid.originalName"
    | "childImageSharp.fluid.presentationHeight"
    | "childImageSharp.fluid.presentationWidth"
    | "childImageSharp.fluid.sizes"
    | "childImageSharp.fluid.src"
    | "childImageSharp.fluid.srcSet"
    | "childImageSharp.fluid.srcSetWebp"
    | "childImageSharp.fluid.srcWebp"
    | "childImageSharp.fluid.tracedSVG"
    | "childImageSharp.gatsbyImageData"
    | "childImageSharp.id"
    | "childImageSharp.internal.content"
    | "childImageSharp.internal.contentDigest"
    | "childImageSharp.internal.contentFilePath"
    | "childImageSharp.internal.description"
    | "childImageSharp.internal.fieldOwners"
    | "childImageSharp.internal.ignoreType"
    | "childImageSharp.internal.mediaType"
    | "childImageSharp.internal.owner"
    | "childImageSharp.internal.type"
    | "childImageSharp.original.height"
    | "childImageSharp.original.src"
    | "childImageSharp.original.width"
    | "childImageSharp.parent.children"
    | "childImageSharp.parent.children.children"
    | "childImageSharp.parent.children.id"
    | "childImageSharp.parent.id"
    | "childImageSharp.parent.internal.content"
    | "childImageSharp.parent.internal.contentDigest"
    | "childImageSharp.parent.internal.contentFilePath"
    | "childImageSharp.parent.internal.description"
    | "childImageSharp.parent.internal.fieldOwners"
    | "childImageSharp.parent.internal.ignoreType"
    | "childImageSharp.parent.internal.mediaType"
    | "childImageSharp.parent.internal.owner"
    | "childImageSharp.parent.internal.type"
    | "childImageSharp.parent.parent.children"
    | "childImageSharp.parent.parent.id"
    | "childImageSharp.resize.aspectRatio"
    | "childImageSharp.resize.height"
    | "childImageSharp.resize.originalName"
    | "childImageSharp.resize.src"
    | "childImageSharp.resize.tracedSVG"
    | "childImageSharp.resize.width"
    | "childMarkdownRemark.children"
    | "childMarkdownRemark.children.children"
    | "childMarkdownRemark.children.children.children"
    | "childMarkdownRemark.children.children.id"
    | "childMarkdownRemark.children.id"
    | "childMarkdownRemark.children.internal.content"
    | "childMarkdownRemark.children.internal.contentDigest"
    | "childMarkdownRemark.children.internal.contentFilePath"
    | "childMarkdownRemark.children.internal.description"
    | "childMarkdownRemark.children.internal.fieldOwners"
    | "childMarkdownRemark.children.internal.ignoreType"
    | "childMarkdownRemark.children.internal.mediaType"
    | "childMarkdownRemark.children.internal.owner"
    | "childMarkdownRemark.children.internal.type"
    | "childMarkdownRemark.children.parent.children"
    | "childMarkdownRemark.children.parent.id"
    | "childMarkdownRemark.excerpt"
    | "childMarkdownRemark.excerptAst"
    | "childMarkdownRemark.fileAbsolutePath"
    | "childMarkdownRemark.frontmatter.coverImage.absolutePath"
    | "childMarkdownRemark.frontmatter.coverImage.accessTime"
    | "childMarkdownRemark.frontmatter.coverImage.atime"
    | "childMarkdownRemark.frontmatter.coverImage.atimeMs"
    | "childMarkdownRemark.frontmatter.coverImage.base"
    | "childMarkdownRemark.frontmatter.coverImage.birthTime"
    | "childMarkdownRemark.frontmatter.coverImage.birthtime"
    | "childMarkdownRemark.frontmatter.coverImage.birthtimeMs"
    | "childMarkdownRemark.frontmatter.coverImage.blksize"
    | "childMarkdownRemark.frontmatter.coverImage.blocks"
    | "childMarkdownRemark.frontmatter.coverImage.changeTime"
    | "childMarkdownRemark.frontmatter.coverImage.children"
    | "childMarkdownRemark.frontmatter.coverImage.childrenImageSharp"
    | "childMarkdownRemark.frontmatter.coverImage.childrenMarkdownRemark"
    | "childMarkdownRemark.frontmatter.coverImage.childrenYaml"
    | "childMarkdownRemark.frontmatter.coverImage.ctime"
    | "childMarkdownRemark.frontmatter.coverImage.ctimeMs"
    | "childMarkdownRemark.frontmatter.coverImage.dev"
    | "childMarkdownRemark.frontmatter.coverImage.dir"
    | "childMarkdownRemark.frontmatter.coverImage.ext"
    | "childMarkdownRemark.frontmatter.coverImage.extension"
    | "childMarkdownRemark.frontmatter.coverImage.gid"
    | "childMarkdownRemark.frontmatter.coverImage.id"
    | "childMarkdownRemark.frontmatter.coverImage.ino"
    | "childMarkdownRemark.frontmatter.coverImage.mode"
    | "childMarkdownRemark.frontmatter.coverImage.modifiedTime"
    | "childMarkdownRemark.frontmatter.coverImage.mtime"
    | "childMarkdownRemark.frontmatter.coverImage.mtimeMs"
    | "childMarkdownRemark.frontmatter.coverImage.name"
    | "childMarkdownRemark.frontmatter.coverImage.nlink"
    | "childMarkdownRemark.frontmatter.coverImage.prettySize"
    | "childMarkdownRemark.frontmatter.coverImage.publicURL"
    | "childMarkdownRemark.frontmatter.coverImage.rdev"
    | "childMarkdownRemark.frontmatter.coverImage.relativeDirectory"
    | "childMarkdownRemark.frontmatter.coverImage.relativePath"
    | "childMarkdownRemark.frontmatter.coverImage.root"
    | "childMarkdownRemark.frontmatter.coverImage.size"
    | "childMarkdownRemark.frontmatter.coverImage.sourceInstanceName"
    | "childMarkdownRemark.frontmatter.coverImage.uid"
    | "childMarkdownRemark.frontmatter.title"
    | "childMarkdownRemark.headings"
    | "childMarkdownRemark.headings.depth"
    | "childMarkdownRemark.headings.id"
    | "childMarkdownRemark.headings.value"
    | "childMarkdownRemark.html"
    | "childMarkdownRemark.htmlAst"
    | "childMarkdownRemark.id"
    | "childMarkdownRemark.internal.content"
    | "childMarkdownRemark.internal.contentDigest"
    | "childMarkdownRemark.internal.contentFilePath"
    | "childMarkdownRemark.internal.description"
    | "childMarkdownRemark.internal.fieldOwners"
    | "childMarkdownRemark.internal.ignoreType"
    | "childMarkdownRemark.internal.mediaType"
    | "childMarkdownRemark.internal.owner"
    | "childMarkdownRemark.internal.type"
    | "childMarkdownRemark.parent.children"
    | "childMarkdownRemark.parent.children.children"
    | "childMarkdownRemark.parent.children.id"
    | "childMarkdownRemark.parent.id"
    | "childMarkdownRemark.parent.internal.content"
    | "childMarkdownRemark.parent.internal.contentDigest"
    | "childMarkdownRemark.parent.internal.contentFilePath"
    | "childMarkdownRemark.parent.internal.description"
    | "childMarkdownRemark.parent.internal.fieldOwners"
    | "childMarkdownRemark.parent.internal.ignoreType"
    | "childMarkdownRemark.parent.internal.mediaType"
    | "childMarkdownRemark.parent.internal.owner"
    | "childMarkdownRemark.parent.internal.type"
    | "childMarkdownRemark.parent.parent.children"
    | "childMarkdownRemark.parent.parent.id"
    | "childMarkdownRemark.rawMarkdownBody"
    | "childMarkdownRemark.tableOfContents"
    | "childMarkdownRemark.timeToRead"
    | "childMarkdownRemark.wordCount.paragraphs"
    | "childMarkdownRemark.wordCount.sentences"
    | "childMarkdownRemark.wordCount.words"
    | "childYaml.children"
    | "childYaml.children.children"
    | "childYaml.children.children.children"
    | "childYaml.children.children.id"
    | "childYaml.children.id"
    | "childYaml.children.internal.content"
    | "childYaml.children.internal.contentDigest"
    | "childYaml.children.internal.contentFilePath"
    | "childYaml.children.internal.description"
    | "childYaml.children.internal.fieldOwners"
    | "childYaml.children.internal.ignoreType"
    | "childYaml.children.internal.mediaType"
    | "childYaml.children.internal.owner"
    | "childYaml.children.internal.type"
    | "childYaml.children.parent.children"
    | "childYaml.children.parent.id"
    | "childYaml.cv.experiences"
    | "childYaml.cv.experiences.bullet_points"
    | "childYaml.cv.experiences.company"
    | "childYaml.cv.experiences.position"
    | "childYaml.cv.experiences.tags"
    | "childYaml.cv.experiences.years"
    | "childYaml.cv.skills"
    | "childYaml.id"
    | "childYaml.internal.content"
    | "childYaml.internal.contentDigest"
    | "childYaml.internal.contentFilePath"
    | "childYaml.internal.description"
    | "childYaml.internal.fieldOwners"
    | "childYaml.internal.ignoreType"
    | "childYaml.internal.mediaType"
    | "childYaml.internal.owner"
    | "childYaml.internal.type"
    | "childYaml.open_source_projects"
    | "childYaml.parent.children"
    | "childYaml.parent.children.children"
    | "childYaml.parent.children.id"
    | "childYaml.parent.id"
    | "childYaml.parent.internal.content"
    | "childYaml.parent.internal.contentDigest"
    | "childYaml.parent.internal.contentFilePath"
    | "childYaml.parent.internal.description"
    | "childYaml.parent.internal.fieldOwners"
    | "childYaml.parent.internal.ignoreType"
    | "childYaml.parent.internal.mediaType"
    | "childYaml.parent.internal.owner"
    | "childYaml.parent.internal.type"
    | "childYaml.parent.parent.children"
    | "childYaml.parent.parent.id"
    | "childYaml.profile.avatar"
    | "childYaml.profile.disqus"
    | "childYaml.profile.email"
    | "childYaml.profile.github"
    | "childYaml.profile.name"
    | "childYaml.profile.nickname"
    | "childYaml.profile.phone"
    | "childYaml.profile.stackoverflow"
    | "childYaml.profile.title"
    | "childYaml.profile.twitter"
    | "childYaml.profile.website"
    | "children"
    | "childrenImageSharp"
    | "childrenImageSharp.children"
    | "childrenImageSharp.children.children"
    | "childrenImageSharp.children.children.children"
    | "childrenImageSharp.children.children.id"
    | "childrenImageSharp.children.id"
    | "childrenImageSharp.children.internal.content"
    | "childrenImageSharp.children.internal.contentDigest"
    | "childrenImageSharp.children.internal.contentFilePath"
    | "childrenImageSharp.children.internal.description"
    | "childrenImageSharp.children.internal.fieldOwners"
    | "childrenImageSharp.children.internal.ignoreType"
    | "childrenImageSharp.children.internal.mediaType"
    | "childrenImageSharp.children.internal.owner"
    | "childrenImageSharp.children.internal.type"
    | "childrenImageSharp.children.parent.children"
    | "childrenImageSharp.children.parent.id"
    | "childrenImageSharp.fixed.aspectRatio"
    | "childrenImageSharp.fixed.base64"
    | "childrenImageSharp.fixed.height"
    | "childrenImageSharp.fixed.originalName"
    | "childrenImageSharp.fixed.src"
    | "childrenImageSharp.fixed.srcSet"
    | "childrenImageSharp.fixed.srcSetWebp"
    | "childrenImageSharp.fixed.srcWebp"
    | "childrenImageSharp.fixed.tracedSVG"
    | "childrenImageSharp.fixed.width"
    | "childrenImageSharp.fluid.aspectRatio"
    | "childrenImageSharp.fluid.base64"
    | "childrenImageSharp.fluid.originalImg"
    | "childrenImageSharp.fluid.originalName"
    | "childrenImageSharp.fluid.presentationHeight"
    | "childrenImageSharp.fluid.presentationWidth"
    | "childrenImageSharp.fluid.sizes"
    | "childrenImageSharp.fluid.src"
    | "childrenImageSharp.fluid.srcSet"
    | "childrenImageSharp.fluid.srcSetWebp"
    | "childrenImageSharp.fluid.srcWebp"
    | "childrenImageSharp.fluid.tracedSVG"
    | "childrenImageSharp.gatsbyImageData"
    | "childrenImageSharp.id"
    | "childrenImageSharp.internal.content"
    | "childrenImageSharp.internal.contentDigest"
    | "childrenImageSharp.internal.contentFilePath"
    | "childrenImageSharp.internal.description"
    | "childrenImageSharp.internal.fieldOwners"
    | "childrenImageSharp.internal.ignoreType"
    | "childrenImageSharp.internal.mediaType"
    | "childrenImageSharp.internal.owner"
    | "childrenImageSharp.internal.type"
    | "childrenImageSharp.original.height"
    | "childrenImageSharp.original.src"
    | "childrenImageSharp.original.width"
    | "childrenImageSharp.parent.children"
    | "childrenImageSharp.parent.children.children"
    | "childrenImageSharp.parent.children.id"
    | "childrenImageSharp.parent.id"
    | "childrenImageSharp.parent.internal.content"
    | "childrenImageSharp.parent.internal.contentDigest"
    | "childrenImageSharp.parent.internal.contentFilePath"
    | "childrenImageSharp.parent.internal.description"
    | "childrenImageSharp.parent.internal.fieldOwners"
    | "childrenImageSharp.parent.internal.ignoreType"
    | "childrenImageSharp.parent.internal.mediaType"
    | "childrenImageSharp.parent.internal.owner"
    | "childrenImageSharp.parent.internal.type"
    | "childrenImageSharp.parent.parent.children"
    | "childrenImageSharp.parent.parent.id"
    | "childrenImageSharp.resize.aspectRatio"
    | "childrenImageSharp.resize.height"
    | "childrenImageSharp.resize.originalName"
    | "childrenImageSharp.resize.src"
    | "childrenImageSharp.resize.tracedSVG"
    | "childrenImageSharp.resize.width"
    | "childrenMarkdownRemark"
    | "childrenMarkdownRemark.children"
    | "childrenMarkdownRemark.children.children"
    | "childrenMarkdownRemark.children.children.children"
    | "childrenMarkdownRemark.children.children.id"
    | "childrenMarkdownRemark.children.id"
    | "childrenMarkdownRemark.children.internal.content"
    | "childrenMarkdownRemark.children.internal.contentDigest"
    | "childrenMarkdownRemark.children.internal.contentFilePath"
    | "childrenMarkdownRemark.children.internal.description"
    | "childrenMarkdownRemark.children.internal.fieldOwners"
    | "childrenMarkdownRemark.children.internal.ignoreType"
    | "childrenMarkdownRemark.children.internal.mediaType"
    | "childrenMarkdownRemark.children.internal.owner"
    | "childrenMarkdownRemark.children.internal.type"
    | "childrenMarkdownRemark.children.parent.children"
    | "childrenMarkdownRemark.children.parent.id"
    | "childrenMarkdownRemark.excerpt"
    | "childrenMarkdownRemark.excerptAst"
    | "childrenMarkdownRemark.fileAbsolutePath"
    | "childrenMarkdownRemark.frontmatter.coverImage.absolutePath"
    | "childrenMarkdownRemark.frontmatter.coverImage.accessTime"
    | "childrenMarkdownRemark.frontmatter.coverImage.atime"
    | "childrenMarkdownRemark.frontmatter.coverImage.atimeMs"
    | "childrenMarkdownRemark.frontmatter.coverImage.base"
    | "childrenMarkdownRemark.frontmatter.coverImage.birthTime"
    | "childrenMarkdownRemark.frontmatter.coverImage.birthtime"
    | "childrenMarkdownRemark.frontmatter.coverImage.birthtimeMs"
    | "childrenMarkdownRemark.frontmatter.coverImage.blksize"
    | "childrenMarkdownRemark.frontmatter.coverImage.blocks"
    | "childrenMarkdownRemark.frontmatter.coverImage.changeTime"
    | "childrenMarkdownRemark.frontmatter.coverImage.children"
    | "childrenMarkdownRemark.frontmatter.coverImage.childrenImageSharp"
    | "childrenMarkdownRemark.frontmatter.coverImage.childrenMarkdownRemark"
    | "childrenMarkdownRemark.frontmatter.coverImage.childrenYaml"
    | "childrenMarkdownRemark.frontmatter.coverImage.ctime"
    | "childrenMarkdownRemark.frontmatter.coverImage.ctimeMs"
    | "childrenMarkdownRemark.frontmatter.coverImage.dev"
    | "childrenMarkdownRemark.frontmatter.coverImage.dir"
    | "childrenMarkdownRemark.frontmatter.coverImage.ext"
    | "childrenMarkdownRemark.frontmatter.coverImage.extension"
    | "childrenMarkdownRemark.frontmatter.coverImage.gid"
    | "childrenMarkdownRemark.frontmatter.coverImage.id"
    | "childrenMarkdownRemark.frontmatter.coverImage.ino"
    | "childrenMarkdownRemark.frontmatter.coverImage.mode"
    | "childrenMarkdownRemark.frontmatter.coverImage.modifiedTime"
    | "childrenMarkdownRemark.frontmatter.coverImage.mtime"
    | "childrenMarkdownRemark.frontmatter.coverImage.mtimeMs"
    | "childrenMarkdownRemark.frontmatter.coverImage.name"
    | "childrenMarkdownRemark.frontmatter.coverImage.nlink"
    | "childrenMarkdownRemark.frontmatter.coverImage.prettySize"
    | "childrenMarkdownRemark.frontmatter.coverImage.publicURL"
    | "childrenMarkdownRemark.frontmatter.coverImage.rdev"
    | "childrenMarkdownRemark.frontmatter.coverImage.relativeDirectory"
    | "childrenMarkdownRemark.frontmatter.coverImage.relativePath"
    | "childrenMarkdownRemark.frontmatter.coverImage.root"
    | "childrenMarkdownRemark.frontmatter.coverImage.size"
    | "childrenMarkdownRemark.frontmatter.coverImage.sourceInstanceName"
    | "childrenMarkdownRemark.frontmatter.coverImage.uid"
    | "childrenMarkdownRemark.frontmatter.title"
    | "childrenMarkdownRemark.headings"
    | "childrenMarkdownRemark.headings.depth"
    | "childrenMarkdownRemark.headings.id"
    | "childrenMarkdownRemark.headings.value"
    | "childrenMarkdownRemark.html"
    | "childrenMarkdownRemark.htmlAst"
    | "childrenMarkdownRemark.id"
    | "childrenMarkdownRemark.internal.content"
    | "childrenMarkdownRemark.internal.contentDigest"
    | "childrenMarkdownRemark.internal.contentFilePath"
    | "childrenMarkdownRemark.internal.description"
    | "childrenMarkdownRemark.internal.fieldOwners"
    | "childrenMarkdownRemark.internal.ignoreType"
    | "childrenMarkdownRemark.internal.mediaType"
    | "childrenMarkdownRemark.internal.owner"
    | "childrenMarkdownRemark.internal.type"
    | "childrenMarkdownRemark.parent.children"
    | "childrenMarkdownRemark.parent.children.children"
    | "childrenMarkdownRemark.parent.children.id"
    | "childrenMarkdownRemark.parent.id"
    | "childrenMarkdownRemark.parent.internal.content"
    | "childrenMarkdownRemark.parent.internal.contentDigest"
    | "childrenMarkdownRemark.parent.internal.contentFilePath"
    | "childrenMarkdownRemark.parent.internal.description"
    | "childrenMarkdownRemark.parent.internal.fieldOwners"
    | "childrenMarkdownRemark.parent.internal.ignoreType"
    | "childrenMarkdownRemark.parent.internal.mediaType"
    | "childrenMarkdownRemark.parent.internal.owner"
    | "childrenMarkdownRemark.parent.internal.type"
    | "childrenMarkdownRemark.parent.parent.children"
    | "childrenMarkdownRemark.parent.parent.id"
    | "childrenMarkdownRemark.rawMarkdownBody"
    | "childrenMarkdownRemark.tableOfContents"
    | "childrenMarkdownRemark.timeToRead"
    | "childrenMarkdownRemark.wordCount.paragraphs"
    | "childrenMarkdownRemark.wordCount.sentences"
    | "childrenMarkdownRemark.wordCount.words"
    | "childrenYaml"
    | "childrenYaml.children"
    | "childrenYaml.children.children"
    | "childrenYaml.children.children.children"
    | "childrenYaml.children.children.id"
    | "childrenYaml.children.id"
    | "childrenYaml.children.internal.content"
    | "childrenYaml.children.internal.contentDigest"
    | "childrenYaml.children.internal.contentFilePath"
    | "childrenYaml.children.internal.description"
    | "childrenYaml.children.internal.fieldOwners"
    | "childrenYaml.children.internal.ignoreType"
    | "childrenYaml.children.internal.mediaType"
    | "childrenYaml.children.internal.owner"
    | "childrenYaml.children.internal.type"
    | "childrenYaml.children.parent.children"
    | "childrenYaml.children.parent.id"
    | "childrenYaml.cv.experiences"
    | "childrenYaml.cv.experiences.bullet_points"
    | "childrenYaml.cv.experiences.company"
    | "childrenYaml.cv.experiences.position"
    | "childrenYaml.cv.experiences.tags"
    | "childrenYaml.cv.experiences.years"
    | "childrenYaml.cv.skills"
    | "childrenYaml.id"
    | "childrenYaml.internal.content"
    | "childrenYaml.internal.contentDigest"
    | "childrenYaml.internal.contentFilePath"
    | "childrenYaml.internal.description"
    | "childrenYaml.internal.fieldOwners"
    | "childrenYaml.internal.ignoreType"
    | "childrenYaml.internal.mediaType"
    | "childrenYaml.internal.owner"
    | "childrenYaml.internal.type"
    | "childrenYaml.open_source_projects"
    | "childrenYaml.parent.children"
    | "childrenYaml.parent.children.children"
    | "childrenYaml.parent.children.id"
    | "childrenYaml.parent.id"
    | "childrenYaml.parent.internal.content"
    | "childrenYaml.parent.internal.contentDigest"
    | "childrenYaml.parent.internal.contentFilePath"
    | "childrenYaml.parent.internal.description"
    | "childrenYaml.parent.internal.fieldOwners"
    | "childrenYaml.parent.internal.ignoreType"
    | "childrenYaml.parent.internal.mediaType"
    | "childrenYaml.parent.internal.owner"
    | "childrenYaml.parent.internal.type"
    | "childrenYaml.parent.parent.children"
    | "childrenYaml.parent.parent.id"
    | "childrenYaml.profile.avatar"
    | "childrenYaml.profile.disqus"
    | "childrenYaml.profile.email"
    | "childrenYaml.profile.github"
    | "childrenYaml.profile.name"
    | "childrenYaml.profile.nickname"
    | "childrenYaml.profile.phone"
    | "childrenYaml.profile.stackoverflow"
    | "childrenYaml.profile.title"
    | "childrenYaml.profile.twitter"
    | "childrenYaml.profile.website"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "ctime"
    | "ctimeMs"
    | "dev"
    | "dir"
    | "ext"
    | "extension"
    | "gid"
    | "id"
    | "ino"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "mode"
    | "modifiedTime"
    | "mtime"
    | "mtimeMs"
    | "name"
    | "nlink"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "prettySize"
    | "publicURL"
    | "rdev"
    | "relativeDirectory"
    | "relativePath"
    | "root"
    | "size"
    | "sourceInstanceName"
    | "uid";

  type FileFilterInput = {
    readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
    readonly accessTime: InputMaybe<DateQueryOperatorInput>;
    readonly atime: InputMaybe<DateQueryOperatorInput>;
    readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly base: InputMaybe<StringQueryOperatorInput>;
    readonly birthTime: InputMaybe<DateQueryOperatorInput>;
    readonly birthtime: InputMaybe<DateQueryOperatorInput>;
    readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly blksize: InputMaybe<IntQueryOperatorInput>;
    readonly blocks: InputMaybe<IntQueryOperatorInput>;
    readonly changeTime: InputMaybe<DateQueryOperatorInput>;
    readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
    readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
    readonly childYaml: InputMaybe<YamlFilterInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
    readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
    readonly childrenYaml: InputMaybe<YamlFilterListInput>;
    readonly ctime: InputMaybe<DateQueryOperatorInput>;
    readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly dev: InputMaybe<IntQueryOperatorInput>;
    readonly dir: InputMaybe<StringQueryOperatorInput>;
    readonly ext: InputMaybe<StringQueryOperatorInput>;
    readonly extension: InputMaybe<StringQueryOperatorInput>;
    readonly gid: InputMaybe<IntQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly ino: InputMaybe<FloatQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly mode: InputMaybe<IntQueryOperatorInput>;
    readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
    readonly mtime: InputMaybe<DateQueryOperatorInput>;
    readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly nlink: InputMaybe<IntQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly prettySize: InputMaybe<StringQueryOperatorInput>;
    readonly publicURL: InputMaybe<StringQueryOperatorInput>;
    readonly rdev: InputMaybe<IntQueryOperatorInput>;
    readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
    readonly relativePath: InputMaybe<StringQueryOperatorInput>;
    readonly root: InputMaybe<StringQueryOperatorInput>;
    readonly size: InputMaybe<IntQueryOperatorInput>;
    readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
    readonly uid: InputMaybe<IntQueryOperatorInput>;
  };

  type FileGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<FileEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<FileGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<File>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type FileGroupConnection_distinctArgs = {
    field: FileFieldsEnum;
  };

  type FileGroupConnection_groupArgs = {
    field: FileFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type FileGroupConnection_maxArgs = {
    field: FileFieldsEnum;
  };

  type FileGroupConnection_minArgs = {
    field: FileFieldsEnum;
  };

  type FileGroupConnection_sumArgs = {
    field: FileFieldsEnum;
  };

  type FileSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type FloatQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["Float"]>;
    readonly gt: InputMaybe<Scalars["Float"]>;
    readonly gte: InputMaybe<Scalars["Float"]>;
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Float"]>>>;
    readonly lt: InputMaybe<Scalars["Float"]>;
    readonly lte: InputMaybe<Scalars["Float"]>;
    readonly ne: InputMaybe<Scalars["Float"]>;
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Float"]>>>;
  };

  type GatsbyImageDataQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["GatsbyImageData"]>;
    readonly in: InputMaybe<
      ReadonlyArray<InputMaybe<Scalars["GatsbyImageData"]>>
    >;
    readonly ne: InputMaybe<Scalars["GatsbyImageData"]>;
    readonly nin: InputMaybe<
      ReadonlyArray<InputMaybe<Scalars["GatsbyImageData"]>>
    >;
  };

  type GatsbyImageFormat = "auto" | "avif" | "jpg" | "" | "png" | "webp";

  type GatsbyImageLayout = "constrained" | "fixed" | "fullWidth";

  type GatsbyImagePlaceholder =
    | "blurred"
    | "dominantColor"
    | "none"
    | "tracedSVG";

  type ImageCropFocus = 17 | 0 | 2 | 16 | 1 | 5 | 8 | 3 | 6 | 7 | 4;

  type ImageFit = "contain" | "cover" | "fill" | "inside" | "outside";

  type ImageFormat = "" | "avif" | "jpg" | "" | "png" | "webp";

  type ImageLayout = "constrained" | "fixed" | "fullWidth";

  type ImagePlaceholder = "blurred" | "dominantColor" | "none" | "tracedSVG";

  type ImageSharp = Node & {
    readonly children: ReadonlyArray<Node>;
    readonly fixed: Maybe<ImageSharpFixed>;
    readonly fluid: Maybe<ImageSharpFluid>;
    readonly gatsbyImageData: Scalars["GatsbyImageData"];
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly original: Maybe<ImageSharpOriginal>;
    readonly parent: Maybe<Node>;
    readonly resize: Maybe<ImageSharpResize>;
  };

  type ImageSharp_fixedArgs = {
    background?: InputMaybe<Scalars["String"]>;
    base64Width: InputMaybe<Scalars["Int"]>;
    cropFocus?: InputMaybe<ImageCropFocus>;
    duotone: InputMaybe<DuotoneGradient>;
    fit?: InputMaybe<ImageFit>;
    grayscale?: InputMaybe<Scalars["Boolean"]>;
    height: InputMaybe<Scalars["Int"]>;
    jpegProgressive?: InputMaybe<Scalars["Boolean"]>;
    jpegQuality: InputMaybe<Scalars["Int"]>;
    pngCompressionSpeed?: InputMaybe<Scalars["Int"]>;
    pngQuality: InputMaybe<Scalars["Int"]>;
    quality: InputMaybe<Scalars["Int"]>;
    rotate?: InputMaybe<Scalars["Int"]>;
    toFormat?: InputMaybe<ImageFormat>;
    toFormatBase64?: InputMaybe<ImageFormat>;
    traceSVG: InputMaybe<Potrace>;
    trim?: InputMaybe<Scalars["Float"]>;
    webpQuality: InputMaybe<Scalars["Int"]>;
    width: InputMaybe<Scalars["Int"]>;
  };

  type ImageSharp_fluidArgs = {
    background?: InputMaybe<Scalars["String"]>;
    base64Width: InputMaybe<Scalars["Int"]>;
    cropFocus?: InputMaybe<ImageCropFocus>;
    duotone: InputMaybe<DuotoneGradient>;
    fit?: InputMaybe<ImageFit>;
    grayscale?: InputMaybe<Scalars["Boolean"]>;
    jpegProgressive?: InputMaybe<Scalars["Boolean"]>;
    jpegQuality: InputMaybe<Scalars["Int"]>;
    maxHeight: InputMaybe<Scalars["Int"]>;
    maxWidth: InputMaybe<Scalars["Int"]>;
    pngCompressionSpeed?: InputMaybe<Scalars["Int"]>;
    pngQuality: InputMaybe<Scalars["Int"]>;
    quality: InputMaybe<Scalars["Int"]>;
    rotate?: InputMaybe<Scalars["Int"]>;
    sizes?: InputMaybe<Scalars["String"]>;
    srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
    toFormat?: InputMaybe<ImageFormat>;
    toFormatBase64?: InputMaybe<ImageFormat>;
    traceSVG: InputMaybe<Potrace>;
    trim?: InputMaybe<Scalars["Float"]>;
    webpQuality: InputMaybe<Scalars["Int"]>;
  };

  type ImageSharp_gatsbyImageDataArgs = {
    aspectRatio: InputMaybe<Scalars["Float"]>;
    avifOptions: InputMaybe<AVIFOptions>;
    backgroundColor: InputMaybe<Scalars["String"]>;
    blurredOptions: InputMaybe<BlurredOptions>;
    breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
    formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
    height: InputMaybe<Scalars["Int"]>;
    jpgOptions: InputMaybe<JPGOptions>;
    layout?: InputMaybe<ImageLayout>;
    outputPixelDensities: InputMaybe<
      ReadonlyArray<InputMaybe<Scalars["Float"]>>
    >;
    placeholder: InputMaybe<ImagePlaceholder>;
    pngOptions: InputMaybe<PNGOptions>;
    quality: InputMaybe<Scalars["Int"]>;
    sizes: InputMaybe<Scalars["String"]>;
    tracedSVGOptions: InputMaybe<Potrace>;
    transformOptions: InputMaybe<TransformOptions>;
    webpOptions: InputMaybe<WebPOptions>;
    width: InputMaybe<Scalars["Int"]>;
  };

  type ImageSharp_resizeArgs = {
    background?: InputMaybe<Scalars["String"]>;
    base64?: InputMaybe<Scalars["Boolean"]>;
    cropFocus?: InputMaybe<ImageCropFocus>;
    duotone: InputMaybe<DuotoneGradient>;
    fit?: InputMaybe<ImageFit>;
    grayscale?: InputMaybe<Scalars["Boolean"]>;
    height: InputMaybe<Scalars["Int"]>;
    jpegProgressive?: InputMaybe<Scalars["Boolean"]>;
    jpegQuality: InputMaybe<Scalars["Int"]>;
    pngCompressionLevel?: InputMaybe<Scalars["Int"]>;
    pngCompressionSpeed?: InputMaybe<Scalars["Int"]>;
    pngQuality: InputMaybe<Scalars["Int"]>;
    quality: InputMaybe<Scalars["Int"]>;
    rotate?: InputMaybe<Scalars["Int"]>;
    toFormat?: InputMaybe<ImageFormat>;
    traceSVG: InputMaybe<Potrace>;
    trim?: InputMaybe<Scalars["Float"]>;
    webpQuality: InputMaybe<Scalars["Int"]>;
    width: InputMaybe<Scalars["Int"]>;
  };

  type ImageSharpConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<ImageSharpEdge>;
    readonly group: ReadonlyArray<ImageSharpGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<ImageSharp>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ImageSharpConnection_distinctArgs = {
    field: ImageSharpFieldsEnum;
  };

  type ImageSharpConnection_groupArgs = {
    field: ImageSharpFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ImageSharpConnection_maxArgs = {
    field: ImageSharpFieldsEnum;
  };

  type ImageSharpConnection_minArgs = {
    field: ImageSharpFieldsEnum;
  };

  type ImageSharpConnection_sumArgs = {
    field: ImageSharpFieldsEnum;
  };

  type ImageSharpEdge = {
    readonly next: Maybe<ImageSharp>;
    readonly node: ImageSharp;
    readonly previous: Maybe<ImageSharp>;
  };

  type ImageSharpFieldsEnum =
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "fixed.aspectRatio"
    | "fixed.base64"
    | "fixed.height"
    | "fixed.originalName"
    | "fixed.src"
    | "fixed.srcSet"
    | "fixed.srcSetWebp"
    | "fixed.srcWebp"
    | "fixed.tracedSVG"
    | "fixed.width"
    | "fluid.aspectRatio"
    | "fluid.base64"
    | "fluid.originalImg"
    | "fluid.originalName"
    | "fluid.presentationHeight"
    | "fluid.presentationWidth"
    | "fluid.sizes"
    | "fluid.src"
    | "fluid.srcSet"
    | "fluid.srcSetWebp"
    | "fluid.srcWebp"
    | "fluid.tracedSVG"
    | "gatsbyImageData"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "original.height"
    | "original.src"
    | "original.width"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "resize.aspectRatio"
    | "resize.height"
    | "resize.originalName"
    | "resize.src"
    | "resize.tracedSVG"
    | "resize.width";

  type ImageSharpFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
    readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
    readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
  };

  type ImageSharpFilterListInput = {
    readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
  };

  type ImageSharpFixed = {
    readonly aspectRatio: Maybe<Scalars["Float"]>;
    readonly base64: Maybe<Scalars["String"]>;
    readonly height: Scalars["Float"];
    readonly originalName: Maybe<Scalars["String"]>;
    readonly src: Scalars["String"];
    readonly srcSet: Scalars["String"];
    readonly srcSetWebp: Maybe<Scalars["String"]>;
    readonly srcWebp: Maybe<Scalars["String"]>;
    readonly tracedSVG: Maybe<Scalars["String"]>;
    readonly width: Scalars["Float"];
  };

  type ImageSharpFixedFilterInput = {
    readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
    readonly base64: InputMaybe<StringQueryOperatorInput>;
    readonly height: InputMaybe<FloatQueryOperatorInput>;
    readonly originalName: InputMaybe<StringQueryOperatorInput>;
    readonly src: InputMaybe<StringQueryOperatorInput>;
    readonly srcSet: InputMaybe<StringQueryOperatorInput>;
    readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
    readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
    readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
    readonly width: InputMaybe<FloatQueryOperatorInput>;
  };

  type ImageSharpFluid = {
    readonly aspectRatio: Scalars["Float"];
    readonly base64: Maybe<Scalars["String"]>;
    readonly originalImg: Maybe<Scalars["String"]>;
    readonly originalName: Maybe<Scalars["String"]>;
    readonly presentationHeight: Scalars["Int"];
    readonly presentationWidth: Scalars["Int"];
    readonly sizes: Scalars["String"];
    readonly src: Scalars["String"];
    readonly srcSet: Scalars["String"];
    readonly srcSetWebp: Maybe<Scalars["String"]>;
    readonly srcWebp: Maybe<Scalars["String"]>;
    readonly tracedSVG: Maybe<Scalars["String"]>;
  };

  type ImageSharpFluidFilterInput = {
    readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
    readonly base64: InputMaybe<StringQueryOperatorInput>;
    readonly originalImg: InputMaybe<StringQueryOperatorInput>;
    readonly originalName: InputMaybe<StringQueryOperatorInput>;
    readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
    readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
    readonly sizes: InputMaybe<StringQueryOperatorInput>;
    readonly src: InputMaybe<StringQueryOperatorInput>;
    readonly srcSet: InputMaybe<StringQueryOperatorInput>;
    readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
    readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
    readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  };

  type ImageSharpGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<ImageSharpEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<ImageSharpGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<ImageSharp>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type ImageSharpGroupConnection_distinctArgs = {
    field: ImageSharpFieldsEnum;
  };

  type ImageSharpGroupConnection_groupArgs = {
    field: ImageSharpFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type ImageSharpGroupConnection_maxArgs = {
    field: ImageSharpFieldsEnum;
  };

  type ImageSharpGroupConnection_minArgs = {
    field: ImageSharpFieldsEnum;
  };

  type ImageSharpGroupConnection_sumArgs = {
    field: ImageSharpFieldsEnum;
  };

  type ImageSharpOriginal = {
    readonly height: Maybe<Scalars["Float"]>;
    readonly src: Maybe<Scalars["String"]>;
    readonly width: Maybe<Scalars["Float"]>;
  };

  type ImageSharpOriginalFilterInput = {
    readonly height: InputMaybe<FloatQueryOperatorInput>;
    readonly src: InputMaybe<StringQueryOperatorInput>;
    readonly width: InputMaybe<FloatQueryOperatorInput>;
  };

  type ImageSharpResize = {
    readonly aspectRatio: Maybe<Scalars["Float"]>;
    readonly height: Maybe<Scalars["Int"]>;
    readonly originalName: Maybe<Scalars["String"]>;
    readonly src: Maybe<Scalars["String"]>;
    readonly tracedSVG: Maybe<Scalars["String"]>;
    readonly width: Maybe<Scalars["Int"]>;
  };

  type ImageSharpResizeFilterInput = {
    readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
    readonly height: InputMaybe<IntQueryOperatorInput>;
    readonly originalName: InputMaybe<StringQueryOperatorInput>;
    readonly src: InputMaybe<StringQueryOperatorInput>;
    readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
    readonly width: InputMaybe<IntQueryOperatorInput>;
  };

  type ImageSharpSortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<ImageSharpFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type IntQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["Int"]>;
    readonly gt: InputMaybe<Scalars["Int"]>;
    readonly gte: InputMaybe<Scalars["Int"]>;
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
    readonly lt: InputMaybe<Scalars["Int"]>;
    readonly lte: InputMaybe<Scalars["Int"]>;
    readonly ne: InputMaybe<Scalars["Int"]>;
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["Int"]>>>;
  };

  type Internal = {
    readonly content: Maybe<Scalars["String"]>;
    readonly contentDigest: Scalars["String"];
    readonly contentFilePath: Maybe<Scalars["String"]>;
    readonly description: Maybe<Scalars["String"]>;
    readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
    readonly ignoreType: Maybe<Scalars["Boolean"]>;
    readonly mediaType: Maybe<Scalars["String"]>;
    readonly owner: Scalars["String"];
    readonly type: Scalars["String"];
  };

  type InternalFilterInput = {
    readonly content: InputMaybe<StringQueryOperatorInput>;
    readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
    readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
    readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
    readonly mediaType: InputMaybe<StringQueryOperatorInput>;
    readonly owner: InputMaybe<StringQueryOperatorInput>;
    readonly type: InputMaybe<StringQueryOperatorInput>;
  };

  type JPGOptions = {
    readonly progressive: InputMaybe<Scalars["Boolean"]>;
    readonly quality: InputMaybe<Scalars["Int"]>;
  };

  type JSONQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["JSON"]>;
    readonly glob: InputMaybe<Scalars["JSON"]>;
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["JSON"]>>>;
    readonly ne: InputMaybe<Scalars["JSON"]>;
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["JSON"]>>>;
    readonly regex: InputMaybe<Scalars["JSON"]>;
  };

  type MarkdownExcerptFormats = "HTML" | "MARKDOWN" | "PLAIN";

  type MarkdownHeading = {
    readonly depth: Maybe<Scalars["Int"]>;
    readonly id: Maybe<Scalars["String"]>;
    readonly value: Maybe<Scalars["String"]>;
  };

  type MarkdownHeadingFilterInput = {
    readonly depth: InputMaybe<IntQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly value: InputMaybe<StringQueryOperatorInput>;
  };

  type MarkdownHeadingFilterListInput = {
    readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
  };

  type MarkdownHeadingLevels = "h1" | "h2" | "h3" | "h4" | "h5" | "h6";

  type MarkdownRemark = Node & {
    readonly children: ReadonlyArray<Node>;
    readonly excerpt: Maybe<Scalars["String"]>;
    readonly excerptAst: Maybe<Scalars["JSON"]>;
    readonly fileAbsolutePath: Maybe<Scalars["String"]>;
    readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
    readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
    readonly html: Maybe<Scalars["String"]>;
    readonly htmlAst: Maybe<Scalars["JSON"]>;
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly parent: Maybe<Node>;
    readonly rawMarkdownBody: Maybe<Scalars["String"]>;
    readonly tableOfContents: Maybe<Scalars["String"]>;
    readonly timeToRead: Maybe<Scalars["Int"]>;
    readonly wordCount: Maybe<MarkdownWordCount>;
  };

  type MarkdownRemark_excerptArgs = {
    format?: InputMaybe<MarkdownExcerptFormats>;
    pruneLength?: InputMaybe<Scalars["Int"]>;
    truncate?: InputMaybe<Scalars["Boolean"]>;
  };

  type MarkdownRemark_excerptAstArgs = {
    pruneLength?: InputMaybe<Scalars["Int"]>;
    truncate?: InputMaybe<Scalars["Boolean"]>;
  };

  type MarkdownRemark_headingsArgs = {
    depth: InputMaybe<MarkdownHeadingLevels>;
  };

  type MarkdownRemark_tableOfContentsArgs = {
    absolute?: InputMaybe<Scalars["Boolean"]>;
    heading: InputMaybe<Scalars["String"]>;
    maxDepth: InputMaybe<Scalars["Int"]>;
    pathToSlugField?: InputMaybe<Scalars["String"]>;
  };

  type MarkdownRemarkConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
    readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<MarkdownRemark>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type MarkdownRemarkConnection_distinctArgs = {
    field: MarkdownRemarkFieldsEnum;
  };

  type MarkdownRemarkConnection_groupArgs = {
    field: MarkdownRemarkFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type MarkdownRemarkConnection_maxArgs = {
    field: MarkdownRemarkFieldsEnum;
  };

  type MarkdownRemarkConnection_minArgs = {
    field: MarkdownRemarkFieldsEnum;
  };

  type MarkdownRemarkConnection_sumArgs = {
    field: MarkdownRemarkFieldsEnum;
  };

  type MarkdownRemarkEdge = {
    readonly next: Maybe<MarkdownRemark>;
    readonly node: MarkdownRemark;
    readonly previous: Maybe<MarkdownRemark>;
  };

  type MarkdownRemarkFieldsEnum =
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "excerpt"
    | "excerptAst"
    | "fileAbsolutePath"
    | "frontmatter.coverImage.absolutePath"
    | "frontmatter.coverImage.accessTime"
    | "frontmatter.coverImage.atime"
    | "frontmatter.coverImage.atimeMs"
    | "frontmatter.coverImage.base"
    | "frontmatter.coverImage.birthTime"
    | "frontmatter.coverImage.birthtime"
    | "frontmatter.coverImage.birthtimeMs"
    | "frontmatter.coverImage.blksize"
    | "frontmatter.coverImage.blocks"
    | "frontmatter.coverImage.changeTime"
    | "frontmatter.coverImage.childImageSharp.children"
    | "frontmatter.coverImage.childImageSharp.gatsbyImageData"
    | "frontmatter.coverImage.childImageSharp.id"
    | "frontmatter.coverImage.childMarkdownRemark.children"
    | "frontmatter.coverImage.childMarkdownRemark.excerpt"
    | "frontmatter.coverImage.childMarkdownRemark.excerptAst"
    | "frontmatter.coverImage.childMarkdownRemark.fileAbsolutePath"
    | "frontmatter.coverImage.childMarkdownRemark.headings"
    | "frontmatter.coverImage.childMarkdownRemark.html"
    | "frontmatter.coverImage.childMarkdownRemark.htmlAst"
    | "frontmatter.coverImage.childMarkdownRemark.id"
    | "frontmatter.coverImage.childMarkdownRemark.rawMarkdownBody"
    | "frontmatter.coverImage.childMarkdownRemark.tableOfContents"
    | "frontmatter.coverImage.childMarkdownRemark.timeToRead"
    | "frontmatter.coverImage.childYaml.children"
    | "frontmatter.coverImage.childYaml.id"
    | "frontmatter.coverImage.childYaml.open_source_projects"
    | "frontmatter.coverImage.children"
    | "frontmatter.coverImage.childrenImageSharp"
    | "frontmatter.coverImage.childrenImageSharp.children"
    | "frontmatter.coverImage.childrenImageSharp.gatsbyImageData"
    | "frontmatter.coverImage.childrenImageSharp.id"
    | "frontmatter.coverImage.childrenMarkdownRemark"
    | "frontmatter.coverImage.childrenMarkdownRemark.children"
    | "frontmatter.coverImage.childrenMarkdownRemark.excerpt"
    | "frontmatter.coverImage.childrenMarkdownRemark.excerptAst"
    | "frontmatter.coverImage.childrenMarkdownRemark.fileAbsolutePath"
    | "frontmatter.coverImage.childrenMarkdownRemark.headings"
    | "frontmatter.coverImage.childrenMarkdownRemark.html"
    | "frontmatter.coverImage.childrenMarkdownRemark.htmlAst"
    | "frontmatter.coverImage.childrenMarkdownRemark.id"
    | "frontmatter.coverImage.childrenMarkdownRemark.rawMarkdownBody"
    | "frontmatter.coverImage.childrenMarkdownRemark.tableOfContents"
    | "frontmatter.coverImage.childrenMarkdownRemark.timeToRead"
    | "frontmatter.coverImage.childrenYaml"
    | "frontmatter.coverImage.childrenYaml.children"
    | "frontmatter.coverImage.childrenYaml.id"
    | "frontmatter.coverImage.childrenYaml.open_source_projects"
    | "frontmatter.coverImage.children.children"
    | "frontmatter.coverImage.children.id"
    | "frontmatter.coverImage.ctime"
    | "frontmatter.coverImage.ctimeMs"
    | "frontmatter.coverImage.dev"
    | "frontmatter.coverImage.dir"
    | "frontmatter.coverImage.ext"
    | "frontmatter.coverImage.extension"
    | "frontmatter.coverImage.gid"
    | "frontmatter.coverImage.id"
    | "frontmatter.coverImage.ino"
    | "frontmatter.coverImage.internal.content"
    | "frontmatter.coverImage.internal.contentDigest"
    | "frontmatter.coverImage.internal.contentFilePath"
    | "frontmatter.coverImage.internal.description"
    | "frontmatter.coverImage.internal.fieldOwners"
    | "frontmatter.coverImage.internal.ignoreType"
    | "frontmatter.coverImage.internal.mediaType"
    | "frontmatter.coverImage.internal.owner"
    | "frontmatter.coverImage.internal.type"
    | "frontmatter.coverImage.mode"
    | "frontmatter.coverImage.modifiedTime"
    | "frontmatter.coverImage.mtime"
    | "frontmatter.coverImage.mtimeMs"
    | "frontmatter.coverImage.name"
    | "frontmatter.coverImage.nlink"
    | "frontmatter.coverImage.parent.children"
    | "frontmatter.coverImage.parent.id"
    | "frontmatter.coverImage.prettySize"
    | "frontmatter.coverImage.publicURL"
    | "frontmatter.coverImage.rdev"
    | "frontmatter.coverImage.relativeDirectory"
    | "frontmatter.coverImage.relativePath"
    | "frontmatter.coverImage.root"
    | "frontmatter.coverImage.size"
    | "frontmatter.coverImage.sourceInstanceName"
    | "frontmatter.coverImage.uid"
    | "frontmatter.title"
    | "headings"
    | "headings.depth"
    | "headings.id"
    | "headings.value"
    | "html"
    | "htmlAst"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "rawMarkdownBody"
    | "tableOfContents"
    | "timeToRead"
    | "wordCount.paragraphs"
    | "wordCount.sentences"
    | "wordCount.words";

  type MarkdownRemarkFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly excerpt: InputMaybe<StringQueryOperatorInput>;
    readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
    readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
    readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
    readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
    readonly html: InputMaybe<StringQueryOperatorInput>;
    readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
    readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
    readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
    readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
  };

  type MarkdownRemarkFilterListInput = {
    readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
  };

  type MarkdownRemarkFrontmatter = {
    readonly coverImage: Maybe<File>;
    readonly title: Maybe<Scalars["String"]>;
  };

  type MarkdownRemarkFrontmatterFilterInput = {
    readonly coverImage: InputMaybe<FileFilterInput>;
    readonly title: InputMaybe<StringQueryOperatorInput>;
  };

  type MarkdownRemarkGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<MarkdownRemark>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type MarkdownRemarkGroupConnection_distinctArgs = {
    field: MarkdownRemarkFieldsEnum;
  };

  type MarkdownRemarkGroupConnection_groupArgs = {
    field: MarkdownRemarkFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type MarkdownRemarkGroupConnection_maxArgs = {
    field: MarkdownRemarkFieldsEnum;
  };

  type MarkdownRemarkGroupConnection_minArgs = {
    field: MarkdownRemarkFieldsEnum;
  };

  type MarkdownRemarkGroupConnection_sumArgs = {
    field: MarkdownRemarkFieldsEnum;
  };

  type MarkdownRemarkSortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<MarkdownRemarkFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type MarkdownWordCount = {
    readonly paragraphs: Maybe<Scalars["Int"]>;
    readonly sentences: Maybe<Scalars["Int"]>;
    readonly words: Maybe<Scalars["Int"]>;
  };

  type MarkdownWordCountFilterInput = {
    readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
    readonly sentences: InputMaybe<IntQueryOperatorInput>;
    readonly words: InputMaybe<IntQueryOperatorInput>;
  };

  /** Node Interface */
  type Node = {
    readonly children: ReadonlyArray<Node>;
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly parent: Maybe<Node>;
  };

  type NodeFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
  };

  type NodeFilterListInput = {
    readonly elemMatch: InputMaybe<NodeFilterInput>;
  };

  type PNGOptions = {
    readonly compressionSpeed: InputMaybe<Scalars["Int"]>;
    readonly quality: InputMaybe<Scalars["Int"]>;
  };

  type PageInfo = {
    readonly currentPage: Scalars["Int"];
    readonly hasNextPage: Scalars["Boolean"];
    readonly hasPreviousPage: Scalars["Boolean"];
    readonly itemCount: Scalars["Int"];
    readonly pageCount: Scalars["Int"];
    readonly perPage: Maybe<Scalars["Int"]>;
    readonly totalCount: Scalars["Int"];
  };

  type Potrace = {
    readonly alphaMax: InputMaybe<Scalars["Float"]>;
    readonly background: InputMaybe<Scalars["String"]>;
    readonly blackOnWhite: InputMaybe<Scalars["Boolean"]>;
    readonly color: InputMaybe<Scalars["String"]>;
    readonly optCurve: InputMaybe<Scalars["Boolean"]>;
    readonly optTolerance: InputMaybe<Scalars["Float"]>;
    readonly threshold: InputMaybe<Scalars["Int"]>;
    readonly turdSize: InputMaybe<Scalars["Float"]>;
    readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
  };

  type PotraceTurnPolicy =
    | "black"
    | "left"
    | "majority"
    | "minority"
    | "right"
    | "white";

  type Query = {
    readonly allDirectory: DirectoryConnection;
    readonly allFile: FileConnection;
    readonly allImageSharp: ImageSharpConnection;
    readonly allMarkdownRemark: MarkdownRemarkConnection;
    readonly allSite: SiteConnection;
    readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
    readonly allSiteFunction: SiteFunctionConnection;
    readonly allSitePage: SitePageConnection;
    readonly allSitePlugin: SitePluginConnection;
    readonly allYaml: YamlConnection;
    readonly directory: Maybe<Directory>;
    readonly file: Maybe<File>;
    readonly imageSharp: Maybe<ImageSharp>;
    readonly markdownRemark: Maybe<MarkdownRemark>;
    readonly site: Maybe<Site>;
    readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
    readonly siteFunction: Maybe<SiteFunction>;
    readonly sitePage: Maybe<SitePage>;
    readonly sitePlugin: Maybe<SitePlugin>;
    readonly yaml: Maybe<Yaml>;
  };

  type Query_allDirectoryArgs = {
    filter: InputMaybe<DirectoryFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<DirectorySortInput>;
  };

  type Query_allFileArgs = {
    filter: InputMaybe<FileFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<FileSortInput>;
  };

  type Query_allImageSharpArgs = {
    filter: InputMaybe<ImageSharpFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<ImageSharpSortInput>;
  };

  type Query_allMarkdownRemarkArgs = {
    filter: InputMaybe<MarkdownRemarkFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<MarkdownRemarkSortInput>;
  };

  type Query_allSiteArgs = {
    filter: InputMaybe<SiteFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SiteSortInput>;
  };

  type Query_allSiteBuildMetadataArgs = {
    filter: InputMaybe<SiteBuildMetadataFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SiteBuildMetadataSortInput>;
  };

  type Query_allSiteFunctionArgs = {
    filter: InputMaybe<SiteFunctionFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SiteFunctionSortInput>;
  };

  type Query_allSitePageArgs = {
    filter: InputMaybe<SitePageFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SitePageSortInput>;
  };

  type Query_allSitePluginArgs = {
    filter: InputMaybe<SitePluginFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<SitePluginSortInput>;
  };

  type Query_allYamlArgs = {
    filter: InputMaybe<YamlFilterInput>;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
    sort: InputMaybe<YamlSortInput>;
  };

  type Query_directoryArgs = {
    absolutePath: InputMaybe<StringQueryOperatorInput>;
    accessTime: InputMaybe<DateQueryOperatorInput>;
    atime: InputMaybe<DateQueryOperatorInput>;
    atimeMs: InputMaybe<FloatQueryOperatorInput>;
    base: InputMaybe<StringQueryOperatorInput>;
    birthTime: InputMaybe<DateQueryOperatorInput>;
    birthtime: InputMaybe<DateQueryOperatorInput>;
    birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
    changeTime: InputMaybe<DateQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    ctime: InputMaybe<DateQueryOperatorInput>;
    ctimeMs: InputMaybe<FloatQueryOperatorInput>;
    dev: InputMaybe<IntQueryOperatorInput>;
    dir: InputMaybe<StringQueryOperatorInput>;
    ext: InputMaybe<StringQueryOperatorInput>;
    extension: InputMaybe<StringQueryOperatorInput>;
    gid: InputMaybe<IntQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    ino: InputMaybe<FloatQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    mode: InputMaybe<IntQueryOperatorInput>;
    modifiedTime: InputMaybe<DateQueryOperatorInput>;
    mtime: InputMaybe<DateQueryOperatorInput>;
    mtimeMs: InputMaybe<FloatQueryOperatorInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    nlink: InputMaybe<IntQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    prettySize: InputMaybe<StringQueryOperatorInput>;
    rdev: InputMaybe<IntQueryOperatorInput>;
    relativeDirectory: InputMaybe<StringQueryOperatorInput>;
    relativePath: InputMaybe<StringQueryOperatorInput>;
    root: InputMaybe<StringQueryOperatorInput>;
    size: InputMaybe<IntQueryOperatorInput>;
    sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
    uid: InputMaybe<IntQueryOperatorInput>;
  };

  type Query_fileArgs = {
    absolutePath: InputMaybe<StringQueryOperatorInput>;
    accessTime: InputMaybe<DateQueryOperatorInput>;
    atime: InputMaybe<DateQueryOperatorInput>;
    atimeMs: InputMaybe<FloatQueryOperatorInput>;
    base: InputMaybe<StringQueryOperatorInput>;
    birthTime: InputMaybe<DateQueryOperatorInput>;
    birthtime: InputMaybe<DateQueryOperatorInput>;
    birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
    blksize: InputMaybe<IntQueryOperatorInput>;
    blocks: InputMaybe<IntQueryOperatorInput>;
    changeTime: InputMaybe<DateQueryOperatorInput>;
    childImageSharp: InputMaybe<ImageSharpFilterInput>;
    childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
    childYaml: InputMaybe<YamlFilterInput>;
    children: InputMaybe<NodeFilterListInput>;
    childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
    childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
    childrenYaml: InputMaybe<YamlFilterListInput>;
    ctime: InputMaybe<DateQueryOperatorInput>;
    ctimeMs: InputMaybe<FloatQueryOperatorInput>;
    dev: InputMaybe<IntQueryOperatorInput>;
    dir: InputMaybe<StringQueryOperatorInput>;
    ext: InputMaybe<StringQueryOperatorInput>;
    extension: InputMaybe<StringQueryOperatorInput>;
    gid: InputMaybe<IntQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    ino: InputMaybe<FloatQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    mode: InputMaybe<IntQueryOperatorInput>;
    modifiedTime: InputMaybe<DateQueryOperatorInput>;
    mtime: InputMaybe<DateQueryOperatorInput>;
    mtimeMs: InputMaybe<FloatQueryOperatorInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    nlink: InputMaybe<IntQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    prettySize: InputMaybe<StringQueryOperatorInput>;
    publicURL: InputMaybe<StringQueryOperatorInput>;
    rdev: InputMaybe<IntQueryOperatorInput>;
    relativeDirectory: InputMaybe<StringQueryOperatorInput>;
    relativePath: InputMaybe<StringQueryOperatorInput>;
    root: InputMaybe<StringQueryOperatorInput>;
    size: InputMaybe<IntQueryOperatorInput>;
    sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
    uid: InputMaybe<IntQueryOperatorInput>;
  };

  type Query_imageSharpArgs = {
    children: InputMaybe<NodeFilterListInput>;
    fixed: InputMaybe<ImageSharpFixedFilterInput>;
    fluid: InputMaybe<ImageSharpFluidFilterInput>;
    gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    original: InputMaybe<ImageSharpOriginalFilterInput>;
    parent: InputMaybe<NodeFilterInput>;
    resize: InputMaybe<ImageSharpResizeFilterInput>;
  };

  type Query_markdownRemarkArgs = {
    children: InputMaybe<NodeFilterListInput>;
    excerpt: InputMaybe<StringQueryOperatorInput>;
    excerptAst: InputMaybe<JSONQueryOperatorInput>;
    fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
    frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
    headings: InputMaybe<MarkdownHeadingFilterListInput>;
    html: InputMaybe<StringQueryOperatorInput>;
    htmlAst: InputMaybe<JSONQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    parent: InputMaybe<NodeFilterInput>;
    rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
    tableOfContents: InputMaybe<StringQueryOperatorInput>;
    timeToRead: InputMaybe<IntQueryOperatorInput>;
    wordCount: InputMaybe<MarkdownWordCountFilterInput>;
  };

  type Query_siteArgs = {
    buildTime: InputMaybe<DateQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
    host: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    jsxRuntime: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    pathPrefix: InputMaybe<StringQueryOperatorInput>;
    polyfill: InputMaybe<BooleanQueryOperatorInput>;
    port: InputMaybe<IntQueryOperatorInput>;
    siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
    trailingSlash: InputMaybe<StringQueryOperatorInput>;
  };

  type Query_siteBuildMetadataArgs = {
    buildTime: InputMaybe<DateQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    parent: InputMaybe<NodeFilterInput>;
  };

  type Query_siteFunctionArgs = {
    absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    functionRoute: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    matchPath: InputMaybe<StringQueryOperatorInput>;
    originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
    originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    pluginName: InputMaybe<StringQueryOperatorInput>;
    relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  };

  type Query_sitePageArgs = {
    children: InputMaybe<NodeFilterListInput>;
    component: InputMaybe<StringQueryOperatorInput>;
    componentChunkName: InputMaybe<StringQueryOperatorInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    internalComponentName: InputMaybe<StringQueryOperatorInput>;
    matchPath: InputMaybe<StringQueryOperatorInput>;
    pageContext: InputMaybe<JSONQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    path: InputMaybe<StringQueryOperatorInput>;
    pluginCreator: InputMaybe<SitePluginFilterInput>;
  };

  type Query_sitePluginArgs = {
    browserAPIs: InputMaybe<StringQueryOperatorInput>;
    children: InputMaybe<NodeFilterListInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    name: InputMaybe<StringQueryOperatorInput>;
    nodeAPIs: InputMaybe<StringQueryOperatorInput>;
    packageJson: InputMaybe<JSONQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    pluginFilepath: InputMaybe<StringQueryOperatorInput>;
    pluginOptions: InputMaybe<JSONQueryOperatorInput>;
    resolve: InputMaybe<StringQueryOperatorInput>;
    ssrAPIs: InputMaybe<StringQueryOperatorInput>;
    version: InputMaybe<StringQueryOperatorInput>;
  };

  type Query_yamlArgs = {
    children: InputMaybe<NodeFilterListInput>;
    cv: InputMaybe<YamlCvFilterInput>;
    id: InputMaybe<StringQueryOperatorInput>;
    internal: InputMaybe<InternalFilterInput>;
    open_source_projects: InputMaybe<StringQueryOperatorInput>;
    parent: InputMaybe<NodeFilterInput>;
    profile: InputMaybe<YamlProfileFilterInput>;
  };

  type Site = Node & {
    readonly buildTime: Maybe<Scalars["Date"]>;
    readonly children: ReadonlyArray<Node>;
    readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
    readonly host: Maybe<Scalars["String"]>;
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly jsxRuntime: Maybe<Scalars["String"]>;
    readonly parent: Maybe<Node>;
    readonly pathPrefix: Maybe<Scalars["String"]>;
    readonly polyfill: Maybe<Scalars["Boolean"]>;
    readonly port: Maybe<Scalars["Int"]>;
    readonly siteMetadata: Maybe<SiteSiteMetadata>;
    readonly trailingSlash: Maybe<Scalars["String"]>;
  };

  type Site_buildTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SiteBuildMetadata = Node & {
    readonly buildTime: Maybe<Scalars["Date"]>;
    readonly children: ReadonlyArray<Node>;
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly parent: Maybe<Node>;
  };

  type SiteBuildMetadata_buildTimeArgs = {
    difference: InputMaybe<Scalars["String"]>;
    formatString: InputMaybe<Scalars["String"]>;
    fromNow: InputMaybe<Scalars["Boolean"]>;
    locale: InputMaybe<Scalars["String"]>;
  };

  type SiteBuildMetadataConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
    readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SiteBuildMetadata>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteBuildMetadataConnection_distinctArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataConnection_groupArgs = {
    field: SiteBuildMetadataFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteBuildMetadataConnection_maxArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataConnection_minArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataConnection_sumArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataEdge = {
    readonly next: Maybe<SiteBuildMetadata>;
    readonly node: SiteBuildMetadata;
    readonly previous: Maybe<SiteBuildMetadata>;
  };

  type SiteBuildMetadataFieldsEnum =
    | "buildTime"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id";

  type SiteBuildMetadataFilterInput = {
    readonly buildTime: InputMaybe<DateQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
  };

  type SiteBuildMetadataGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SiteBuildMetadata>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteBuildMetadataGroupConnection_distinctArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataGroupConnection_groupArgs = {
    field: SiteBuildMetadataFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteBuildMetadataGroupConnection_maxArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataGroupConnection_minArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataGroupConnection_sumArgs = {
    field: SiteBuildMetadataFieldsEnum;
  };

  type SiteBuildMetadataSortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SiteConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SiteEdge>;
    readonly group: ReadonlyArray<SiteGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<Site>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteConnection_distinctArgs = {
    field: SiteFieldsEnum;
  };

  type SiteConnection_groupArgs = {
    field: SiteFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteConnection_maxArgs = {
    field: SiteFieldsEnum;
  };

  type SiteConnection_minArgs = {
    field: SiteFieldsEnum;
  };

  type SiteConnection_sumArgs = {
    field: SiteFieldsEnum;
  };

  type SiteEdge = {
    readonly next: Maybe<Site>;
    readonly node: Site;
    readonly previous: Maybe<Site>;
  };

  type SiteFieldsEnum =
    | "buildTime"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "graphqlTypegen.generateOnBuild"
    | "graphqlTypegen.typesOutputPath"
    | "host"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "jsxRuntime"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "pathPrefix"
    | "polyfill"
    | "port"
    | "siteMetadata.description"
    | "siteMetadata.siteUrl"
    | "siteMetadata.title"
    | "trailingSlash";

  type SiteFilterInput = {
    readonly buildTime: InputMaybe<DateQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
    readonly host: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
    readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
    readonly port: InputMaybe<IntQueryOperatorInput>;
    readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
    readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
  };

  type SiteFunction = Node & {
    readonly absoluteCompiledFilePath: Scalars["String"];
    readonly children: ReadonlyArray<Node>;
    readonly functionRoute: Scalars["String"];
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly matchPath: Maybe<Scalars["String"]>;
    readonly originalAbsoluteFilePath: Scalars["String"];
    readonly originalRelativeFilePath: Scalars["String"];
    readonly parent: Maybe<Node>;
    readonly pluginName: Scalars["String"];
    readonly relativeCompiledFilePath: Scalars["String"];
  };

  type SiteFunctionConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SiteFunctionEdge>;
    readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SiteFunction>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteFunctionConnection_distinctArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionConnection_groupArgs = {
    field: SiteFunctionFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteFunctionConnection_maxArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionConnection_minArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionConnection_sumArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionEdge = {
    readonly next: Maybe<SiteFunction>;
    readonly node: SiteFunction;
    readonly previous: Maybe<SiteFunction>;
  };

  type SiteFunctionFieldsEnum =
    | "absoluteCompiledFilePath"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "functionRoute"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "matchPath"
    | "originalAbsoluteFilePath"
    | "originalRelativeFilePath"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "pluginName"
    | "relativeCompiledFilePath";

  type SiteFunctionFilterInput = {
    readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly matchPath: InputMaybe<StringQueryOperatorInput>;
    readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
    readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly pluginName: InputMaybe<StringQueryOperatorInput>;
    readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  };

  type SiteFunctionGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SiteFunctionEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SiteFunction>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteFunctionGroupConnection_distinctArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionGroupConnection_groupArgs = {
    field: SiteFunctionFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteFunctionGroupConnection_maxArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionGroupConnection_minArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionGroupConnection_sumArgs = {
    field: SiteFunctionFieldsEnum;
  };

  type SiteFunctionSortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SiteGraphqlTypegen = {
    readonly generateOnBuild: Maybe<Scalars["Boolean"]>;
    readonly typesOutputPath: Maybe<Scalars["String"]>;
  };

  type SiteGraphqlTypegenFilterInput = {
    readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
    readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
  };

  type SiteGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SiteEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SiteGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<Site>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SiteGroupConnection_distinctArgs = {
    field: SiteFieldsEnum;
  };

  type SiteGroupConnection_groupArgs = {
    field: SiteFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SiteGroupConnection_maxArgs = {
    field: SiteFieldsEnum;
  };

  type SiteGroupConnection_minArgs = {
    field: SiteFieldsEnum;
  };

  type SiteGroupConnection_sumArgs = {
    field: SiteFieldsEnum;
  };

  type SitePage = Node & {
    readonly children: ReadonlyArray<Node>;
    readonly component: Scalars["String"];
    readonly componentChunkName: Scalars["String"];
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly internalComponentName: Scalars["String"];
    readonly matchPath: Maybe<Scalars["String"]>;
    readonly pageContext: Maybe<Scalars["JSON"]>;
    readonly parent: Maybe<Node>;
    readonly path: Scalars["String"];
    readonly pluginCreator: Maybe<SitePlugin>;
  };

  type SitePageConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SitePageEdge>;
    readonly group: ReadonlyArray<SitePageGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SitePage>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SitePageConnection_distinctArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageConnection_groupArgs = {
    field: SitePageFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SitePageConnection_maxArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageConnection_minArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageConnection_sumArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageEdge = {
    readonly next: Maybe<SitePage>;
    readonly node: SitePage;
    readonly previous: Maybe<SitePage>;
  };

  type SitePageFieldsEnum =
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "component"
    | "componentChunkName"
    | "id"
    | "internalComponentName"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "matchPath"
    | "pageContext"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "path"
    | "pluginCreator.browserAPIs"
    | "pluginCreator.children"
    | "pluginCreator.children.children"
    | "pluginCreator.children.children.children"
    | "pluginCreator.children.children.id"
    | "pluginCreator.children.id"
    | "pluginCreator.children.internal.content"
    | "pluginCreator.children.internal.contentDigest"
    | "pluginCreator.children.internal.contentFilePath"
    | "pluginCreator.children.internal.description"
    | "pluginCreator.children.internal.fieldOwners"
    | "pluginCreator.children.internal.ignoreType"
    | "pluginCreator.children.internal.mediaType"
    | "pluginCreator.children.internal.owner"
    | "pluginCreator.children.internal.type"
    | "pluginCreator.children.parent.children"
    | "pluginCreator.children.parent.id"
    | "pluginCreator.id"
    | "pluginCreator.internal.content"
    | "pluginCreator.internal.contentDigest"
    | "pluginCreator.internal.contentFilePath"
    | "pluginCreator.internal.description"
    | "pluginCreator.internal.fieldOwners"
    | "pluginCreator.internal.ignoreType"
    | "pluginCreator.internal.mediaType"
    | "pluginCreator.internal.owner"
    | "pluginCreator.internal.type"
    | "pluginCreator.name"
    | "pluginCreator.nodeAPIs"
    | "pluginCreator.packageJson"
    | "pluginCreator.parent.children"
    | "pluginCreator.parent.children.children"
    | "pluginCreator.parent.children.id"
    | "pluginCreator.parent.id"
    | "pluginCreator.parent.internal.content"
    | "pluginCreator.parent.internal.contentDigest"
    | "pluginCreator.parent.internal.contentFilePath"
    | "pluginCreator.parent.internal.description"
    | "pluginCreator.parent.internal.fieldOwners"
    | "pluginCreator.parent.internal.ignoreType"
    | "pluginCreator.parent.internal.mediaType"
    | "pluginCreator.parent.internal.owner"
    | "pluginCreator.parent.internal.type"
    | "pluginCreator.parent.parent.children"
    | "pluginCreator.parent.parent.id"
    | "pluginCreator.pluginFilepath"
    | "pluginCreator.pluginOptions"
    | "pluginCreator.resolve"
    | "pluginCreator.ssrAPIs"
    | "pluginCreator.version";

  type SitePageFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly component: InputMaybe<StringQueryOperatorInput>;
    readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
    readonly matchPath: InputMaybe<StringQueryOperatorInput>;
    readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly path: InputMaybe<StringQueryOperatorInput>;
    readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
  };

  type SitePageGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SitePageEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SitePageGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SitePage>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SitePageGroupConnection_distinctArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageGroupConnection_groupArgs = {
    field: SitePageFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SitePageGroupConnection_maxArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageGroupConnection_minArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageGroupConnection_sumArgs = {
    field: SitePageFieldsEnum;
  };

  type SitePageSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SitePlugin = Node & {
    readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
    readonly children: ReadonlyArray<Node>;
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly name: Maybe<Scalars["String"]>;
    readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
    readonly packageJson: Maybe<Scalars["JSON"]>;
    readonly parent: Maybe<Node>;
    readonly pluginFilepath: Maybe<Scalars["String"]>;
    readonly pluginOptions: Maybe<Scalars["JSON"]>;
    readonly resolve: Maybe<Scalars["String"]>;
    readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
    readonly version: Maybe<Scalars["String"]>;
  };

  type SitePluginConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SitePluginEdge>;
    readonly group: ReadonlyArray<SitePluginGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SitePlugin>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SitePluginConnection_distinctArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginConnection_groupArgs = {
    field: SitePluginFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SitePluginConnection_maxArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginConnection_minArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginConnection_sumArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginEdge = {
    readonly next: Maybe<SitePlugin>;
    readonly node: SitePlugin;
    readonly previous: Maybe<SitePlugin>;
  };

  type SitePluginFieldsEnum =
    | "browserAPIs"
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "name"
    | "nodeAPIs"
    | "packageJson"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "pluginFilepath"
    | "pluginOptions"
    | "resolve"
    | "ssrAPIs"
    | "version";

  type SitePluginFilterInput = {
    readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
    readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
    readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
    readonly resolve: InputMaybe<StringQueryOperatorInput>;
    readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
    readonly version: InputMaybe<StringQueryOperatorInput>;
  };

  type SitePluginGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<SitePluginEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<SitePluginGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<SitePlugin>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type SitePluginGroupConnection_distinctArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginGroupConnection_groupArgs = {
    field: SitePluginFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type SitePluginGroupConnection_maxArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginGroupConnection_minArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginGroupConnection_sumArgs = {
    field: SitePluginFieldsEnum;
  };

  type SitePluginSortInput = {
    readonly fields: InputMaybe<
      ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>
    >;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SiteSiteMetadata = {
    readonly description: Maybe<Scalars["String"]>;
    readonly siteUrl: Maybe<Scalars["String"]>;
    readonly title: Maybe<Scalars["String"]>;
  };

  type SiteSiteMetadataFilterInput = {
    readonly description: InputMaybe<StringQueryOperatorInput>;
    readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
    readonly title: InputMaybe<StringQueryOperatorInput>;
  };

  type SiteSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type SortOrderEnum = "ASC" | "DESC";

  type StringQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars["String"]>;
    readonly glob: InputMaybe<Scalars["String"]>;
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars["String"]>>>;
    readonly ne: InputMaybe<Scalars["String"]>;
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars["String"]>>>;
    readonly regex: InputMaybe<Scalars["String"]>;
  };

  type TransformOptions = {
    readonly cropFocus: InputMaybe<ImageCropFocus>;
    readonly duotone: InputMaybe<DuotoneGradient>;
    readonly fit: InputMaybe<ImageFit>;
    readonly grayscale: InputMaybe<Scalars["Boolean"]>;
    readonly rotate: InputMaybe<Scalars["Int"]>;
    readonly trim: InputMaybe<Scalars["Float"]>;
  };

  type WebPOptions = {
    readonly quality: InputMaybe<Scalars["Int"]>;
  };

  type Yaml = Node & {
    readonly children: ReadonlyArray<Node>;
    readonly cv: Maybe<YamlCv>;
    readonly id: Scalars["ID"];
    readonly internal: Internal;
    readonly open_source_projects: Maybe<
      ReadonlyArray<Maybe<Scalars["String"]>>
    >;
    readonly parent: Maybe<Node>;
    readonly profile: Maybe<YamlProfile>;
  };

  type YamlConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<YamlEdge>;
    readonly group: ReadonlyArray<YamlGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<Yaml>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type YamlConnection_distinctArgs = {
    field: YamlFieldsEnum;
  };

  type YamlConnection_groupArgs = {
    field: YamlFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type YamlConnection_maxArgs = {
    field: YamlFieldsEnum;
  };

  type YamlConnection_minArgs = {
    field: YamlFieldsEnum;
  };

  type YamlConnection_sumArgs = {
    field: YamlFieldsEnum;
  };

  type YamlCv = {
    readonly experiences: Maybe<ReadonlyArray<Maybe<YamlCvExperiences>>>;
    readonly skills: Maybe<Scalars["String"]>;
  };

  type YamlCvExperiences = {
    readonly bullet_points: Maybe<ReadonlyArray<Maybe<Scalars["String"]>>>;
    readonly company: Maybe<Scalars["String"]>;
    readonly position: Maybe<Scalars["String"]>;
    readonly tags: Maybe<Scalars["String"]>;
    readonly years: Maybe<Scalars["String"]>;
  };

  type YamlCvExperiencesFilterInput = {
    readonly bullet_points: InputMaybe<StringQueryOperatorInput>;
    readonly company: InputMaybe<StringQueryOperatorInput>;
    readonly position: InputMaybe<StringQueryOperatorInput>;
    readonly tags: InputMaybe<StringQueryOperatorInput>;
    readonly years: InputMaybe<StringQueryOperatorInput>;
  };

  type YamlCvExperiencesFilterListInput = {
    readonly elemMatch: InputMaybe<YamlCvExperiencesFilterInput>;
  };

  type YamlCvFilterInput = {
    readonly experiences: InputMaybe<YamlCvExperiencesFilterListInput>;
    readonly skills: InputMaybe<StringQueryOperatorInput>;
  };

  type YamlEdge = {
    readonly next: Maybe<Yaml>;
    readonly node: Yaml;
    readonly previous: Maybe<Yaml>;
  };

  type YamlFieldsEnum =
    | "children"
    | "children.children"
    | "children.children.children"
    | "children.children.children.children"
    | "children.children.children.id"
    | "children.children.id"
    | "children.children.internal.content"
    | "children.children.internal.contentDigest"
    | "children.children.internal.contentFilePath"
    | "children.children.internal.description"
    | "children.children.internal.fieldOwners"
    | "children.children.internal.ignoreType"
    | "children.children.internal.mediaType"
    | "children.children.internal.owner"
    | "children.children.internal.type"
    | "children.children.parent.children"
    | "children.children.parent.id"
    | "children.id"
    | "children.internal.content"
    | "children.internal.contentDigest"
    | "children.internal.contentFilePath"
    | "children.internal.description"
    | "children.internal.fieldOwners"
    | "children.internal.ignoreType"
    | "children.internal.mediaType"
    | "children.internal.owner"
    | "children.internal.type"
    | "children.parent.children"
    | "children.parent.children.children"
    | "children.parent.children.id"
    | "children.parent.id"
    | "children.parent.internal.content"
    | "children.parent.internal.contentDigest"
    | "children.parent.internal.contentFilePath"
    | "children.parent.internal.description"
    | "children.parent.internal.fieldOwners"
    | "children.parent.internal.ignoreType"
    | "children.parent.internal.mediaType"
    | "children.parent.internal.owner"
    | "children.parent.internal.type"
    | "children.parent.parent.children"
    | "children.parent.parent.id"
    | "cv.experiences"
    | "cv.experiences.bullet_points"
    | "cv.experiences.company"
    | "cv.experiences.position"
    | "cv.experiences.tags"
    | "cv.experiences.years"
    | "cv.skills"
    | "id"
    | "internal.content"
    | "internal.contentDigest"
    | "internal.contentFilePath"
    | "internal.description"
    | "internal.fieldOwners"
    | "internal.ignoreType"
    | "internal.mediaType"
    | "internal.owner"
    | "internal.type"
    | "open_source_projects"
    | "parent.children"
    | "parent.children.children"
    | "parent.children.children.children"
    | "parent.children.children.id"
    | "parent.children.id"
    | "parent.children.internal.content"
    | "parent.children.internal.contentDigest"
    | "parent.children.internal.contentFilePath"
    | "parent.children.internal.description"
    | "parent.children.internal.fieldOwners"
    | "parent.children.internal.ignoreType"
    | "parent.children.internal.mediaType"
    | "parent.children.internal.owner"
    | "parent.children.internal.type"
    | "parent.children.parent.children"
    | "parent.children.parent.id"
    | "parent.id"
    | "parent.internal.content"
    | "parent.internal.contentDigest"
    | "parent.internal.contentFilePath"
    | "parent.internal.description"
    | "parent.internal.fieldOwners"
    | "parent.internal.ignoreType"
    | "parent.internal.mediaType"
    | "parent.internal.owner"
    | "parent.internal.type"
    | "parent.parent.children"
    | "parent.parent.children.children"
    | "parent.parent.children.id"
    | "parent.parent.id"
    | "parent.parent.internal.content"
    | "parent.parent.internal.contentDigest"
    | "parent.parent.internal.contentFilePath"
    | "parent.parent.internal.description"
    | "parent.parent.internal.fieldOwners"
    | "parent.parent.internal.ignoreType"
    | "parent.parent.internal.mediaType"
    | "parent.parent.internal.owner"
    | "parent.parent.internal.type"
    | "parent.parent.parent.children"
    | "parent.parent.parent.id"
    | "profile.avatar"
    | "profile.disqus"
    | "profile.email"
    | "profile.github"
    | "profile.name"
    | "profile.nickname"
    | "profile.phone"
    | "profile.stackoverflow"
    | "profile.title"
    | "profile.twitter"
    | "profile.website";

  type YamlFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>;
    readonly cv: InputMaybe<YamlCvFilterInput>;
    readonly id: InputMaybe<StringQueryOperatorInput>;
    readonly internal: InputMaybe<InternalFilterInput>;
    readonly open_source_projects: InputMaybe<StringQueryOperatorInput>;
    readonly parent: InputMaybe<NodeFilterInput>;
    readonly profile: InputMaybe<YamlProfileFilterInput>;
  };

  type YamlFilterListInput = {
    readonly elemMatch: InputMaybe<YamlFilterInput>;
  };

  type YamlGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars["String"]>;
    readonly edges: ReadonlyArray<YamlEdge>;
    readonly field: Scalars["String"];
    readonly fieldValue: Maybe<Scalars["String"]>;
    readonly group: ReadonlyArray<YamlGroupConnection>;
    readonly max: Maybe<Scalars["Float"]>;
    readonly min: Maybe<Scalars["Float"]>;
    readonly nodes: ReadonlyArray<Yaml>;
    readonly pageInfo: PageInfo;
    readonly sum: Maybe<Scalars["Float"]>;
    readonly totalCount: Scalars["Int"];
  };

  type YamlGroupConnection_distinctArgs = {
    field: YamlFieldsEnum;
  };

  type YamlGroupConnection_groupArgs = {
    field: YamlFieldsEnum;
    limit: InputMaybe<Scalars["Int"]>;
    skip: InputMaybe<Scalars["Int"]>;
  };

  type YamlGroupConnection_maxArgs = {
    field: YamlFieldsEnum;
  };

  type YamlGroupConnection_minArgs = {
    field: YamlFieldsEnum;
  };

  type YamlGroupConnection_sumArgs = {
    field: YamlFieldsEnum;
  };

  type YamlProfile = {
    readonly avatar: Maybe<Scalars["String"]>;
    readonly disqus: Maybe<Scalars["String"]>;
    readonly email: Maybe<Scalars["String"]>;
    readonly github: Maybe<Scalars["String"]>;
    readonly name: Maybe<Scalars["String"]>;
    readonly nickname: Maybe<Scalars["String"]>;
    readonly phone: Maybe<Scalars["String"]>;
    readonly stackoverflow: Maybe<Scalars["Int"]>;
    readonly title: Maybe<Scalars["String"]>;
    readonly twitter: Maybe<Scalars["String"]>;
    readonly website: Maybe<Scalars["String"]>;
  };

  type YamlProfileFilterInput = {
    readonly avatar: InputMaybe<StringQueryOperatorInput>;
    readonly disqus: InputMaybe<StringQueryOperatorInput>;
    readonly email: InputMaybe<StringQueryOperatorInput>;
    readonly github: InputMaybe<StringQueryOperatorInput>;
    readonly name: InputMaybe<StringQueryOperatorInput>;
    readonly nickname: InputMaybe<StringQueryOperatorInput>;
    readonly phone: InputMaybe<StringQueryOperatorInput>;
    readonly stackoverflow: InputMaybe<IntQueryOperatorInput>;
    readonly title: InputMaybe<StringQueryOperatorInput>;
    readonly twitter: InputMaybe<StringQueryOperatorInput>;
    readonly website: InputMaybe<StringQueryOperatorInput>;
  };

  type YamlSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<YamlFieldsEnum>>>;
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
  };

  type AboutCoverImageQueryVariables = Exact<{ [key: string]: never }>;

  type AboutCoverImageQuery = {
    readonly file: {
      readonly childImageSharp: {
        readonly gatsbyImageData: import("gatsby-plugin-image").IGatsbyImageData;
      } | null;
    } | null;
  };

  type AboutMarkdownQueryVariables = Exact<{ [key: string]: never }>;

  type AboutMarkdownQuery = {
    readonly file: {
      readonly childMarkdownRemark: { readonly html: string | null } | null;
    } | null;
  };

  type AuthorCVQueryVariables = Exact<{ [key: string]: never }>;

  type AuthorCVQuery = {
    readonly file: {
      readonly childYaml: {
        readonly cv: {
          readonly skills: string | null;
          readonly experiences: ReadonlyArray<{
            readonly company: string | null;
            readonly position: string | null;
            readonly years: string | null;
            readonly tags: string | null;
            readonly bullet_points: ReadonlyArray<string | null> | null;
          } | null> | null;
        } | null;
      } | null;
    } | null;
  };

  type AuthorProfileQueryVariables = Exact<{ [key: string]: never }>;

  type AuthorProfileQuery = {
    readonly file: {
      readonly childYaml: {
        readonly profile: {
          readonly name: string | null;
          readonly nickname: string | null;
          readonly title: string | null;
          readonly website: string | null;
          readonly email: string | null;
          readonly phone: string | null;
          readonly github: string | null;
          readonly twitter: string | null;
          readonly stackoverflow: number | null;
          readonly disqus: string | null;
          readonly avatar: string | null;
        } | null;
      } | null;
    } | null;
  };

  type CoverImageSharpFragment = {
    readonly gatsbyImageData: import("gatsby-plugin-image").IGatsbyImageData;
  };

  type GatsbyImageSharpFixedFragment = {
    readonly base64: string | null;
    readonly width: number;
    readonly height: number;
    readonly src: string;
    readonly srcSet: string;
  };

  type GatsbyImageSharpFixed_noBase64Fragment = {
    readonly width: number;
    readonly height: number;
    readonly src: string;
    readonly srcSet: string;
  };

  type GatsbyImageSharpFixed_tracedSVGFragment = {
    readonly tracedSVG: string | null;
    readonly width: number;
    readonly height: number;
    readonly src: string;
    readonly srcSet: string;
  };

  type GatsbyImageSharpFixed_withWebpFragment = {
    readonly base64: string | null;
    readonly width: number;
    readonly height: number;
    readonly src: string;
    readonly srcSet: string;
    readonly srcWebp: string | null;
    readonly srcSetWebp: string | null;
  };

  type GatsbyImageSharpFixed_withWebp_noBase64Fragment = {
    readonly width: number;
    readonly height: number;
    readonly src: string;
    readonly srcSet: string;
    readonly srcWebp: string | null;
    readonly srcSetWebp: string | null;
  };

  type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = {
    readonly tracedSVG: string | null;
    readonly width: number;
    readonly height: number;
    readonly src: string;
    readonly srcSet: string;
    readonly srcWebp: string | null;
    readonly srcSetWebp: string | null;
  };

  type GatsbyImageSharpFluidFragment = {
    readonly base64: string | null;
    readonly aspectRatio: number;
    readonly src: string;
    readonly srcSet: string;
    readonly sizes: string;
  };

  type GatsbyImageSharpFluid_noBase64Fragment = {
    readonly aspectRatio: number;
    readonly src: string;
    readonly srcSet: string;
    readonly sizes: string;
  };

  type GatsbyImageSharpFluid_tracedSVGFragment = {
    readonly tracedSVG: string | null;
    readonly aspectRatio: number;
    readonly src: string;
    readonly srcSet: string;
    readonly sizes: string;
  };

  type GatsbyImageSharpFluid_withWebpFragment = {
    readonly base64: string | null;
    readonly aspectRatio: number;
    readonly src: string;
    readonly srcSet: string;
    readonly srcWebp: string | null;
    readonly srcSetWebp: string | null;
    readonly sizes: string;
  };

  type GatsbyImageSharpFluid_withWebp_noBase64Fragment = {
    readonly aspectRatio: number;
    readonly src: string;
    readonly srcSet: string;
    readonly srcWebp: string | null;
    readonly srcSetWebp: string | null;
    readonly sizes: string;
  };

  type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = {
    readonly tracedSVG: string | null;
    readonly aspectRatio: number;
    readonly src: string;
    readonly srcSet: string;
    readonly srcWebp: string | null;
    readonly srcSetWebp: string | null;
    readonly sizes: string;
  };

  type GatsbyImageSharpFluidLimitPresentationSizeFragment = {
    readonly maxHeight: number;
    readonly maxWidth: number;
  };

  type GetBlogPostsQueryVariables = Exact<{ [key: string]: never }>;

  type GetBlogPostsQuery = {
    readonly allFile: {
      readonly nodes: ReadonlyArray<{
        readonly name: string;
        readonly childMarkdownRemark: {
          readonly html: string | null;
          readonly excerpt: string | null;
          readonly frontmatter: {
            readonly title: string | null;
            readonly coverImage: {
              readonly childImageSharp: {
                readonly gatsbyImageData: import("gatsby-plugin-image").IGatsbyImageData;
              } | null;
            } | null;
          } | null;
        } | null;
      }>;
    };
  };

  type GetPostFileQueryVariables = Exact<{
    id: InputMaybe<Scalars["String"]>;
  }>;

  type GetPostFileQuery = {
    readonly file: {
      readonly name: string;
      readonly childMarkdownRemark: {
        readonly html: string | null;
        readonly excerpt: string | null;
        readonly frontmatter: {
          readonly title: string | null;
          readonly coverImage: {
            readonly childImageSharp: {
              readonly gatsbyImageData: import("gatsby-plugin-image").IGatsbyImageData;
            } | null;
          } | null;
        } | null;
      } | null;
    } | null;
  };

  type HomeCoverImageQueryVariables = Exact<{ [key: string]: never }>;

  type HomeCoverImageQuery = {
    readonly file: {
      readonly childImageSharp: {
        readonly gatsbyImageData: import("gatsby-plugin-image").IGatsbyImageData;
      } | null;
    } | null;
  };

  type OpenSourceProjectsQueryVariables = Exact<{ [key: string]: never }>;

  type OpenSourceProjectsQuery = {
    readonly file: {
      readonly childYaml: {
        readonly open_source_projects: ReadonlyArray<string | null> | null;
      } | null;
    } | null;
  };

  type PostFileFragment = {
    readonly name: string;
    readonly childMarkdownRemark: {
      readonly html: string | null;
      readonly excerpt: string | null;
      readonly frontmatter: {
        readonly title: string | null;
        readonly coverImage: {
          readonly childImageSharp: {
            readonly gatsbyImageData: import("gatsby-plugin-image").IGatsbyImageData;
          } | null;
        } | null;
      } | null;
    } | null;
  };

  type RawShortBioQueryVariables = Exact<{ [key: string]: never }>;

  type RawShortBioQuery = {
    readonly file: {
      readonly childMarkdownRemark: {
        readonly rawMarkdownBody: string | null;
      } | null;
    } | null;
  };

  type ShortAboutMarkdownQueryVariables = Exact<{ [key: string]: never }>;

  type ShortAboutMarkdownQuery = {
    readonly file: {
      readonly childMarkdownRemark: { readonly html: string | null } | null;
    } | null;
  };
}
