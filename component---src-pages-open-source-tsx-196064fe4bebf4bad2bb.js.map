{"version":3,"file":"component---src-pages-open-source-tsx-196064fe4bebf4bad2bb.js","mappings":"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","sources":["webpack://avi-sharvit/./src/open-source/utils/githubFetcher.ts","webpack://avi-sharvit/./src/open-source/hooks.ts","webpack://avi-sharvit/./node_modules/react-loading-skeleton/dist/index.js","webpack://avi-sharvit/./src/open-source/components/GithubCard/components/ForksIcon.tsx","webpack://avi-sharvit/./src/open-source/components/GithubCard/components/StarIcon.tsx","webpack://avi-sharvit/./src/open-source/components/GithubCard/components/TitleIcon.tsx","webpack://avi-sharvit/./src/open-source/utils/getProgramingLanguageColor.ts","webpack://avi-sharvit/./src/open-source/components/GithubCard/components/LanguageIcon.tsx","webpack://avi-sharvit/./src/open-source/components/GithubCard/components/LanguageIcon.module.css","webpack://avi-sharvit/./src/open-source/components/GithubCard/GithubCard.module.css","webpack://avi-sharvit/./src/open-source/components/GithubCard/GithubCard.tsx","webpack://avi-sharvit/./src/open-source/components/GithubCardsGrid/GithubCardsGrid.tsx","webpack://avi-sharvit/./src/open-source/components/GithubCardsGrid/GithubCardsGrid.module.css","webpack://avi-sharvit/./src/open-source/components/OpenSourceSection/OpenSourceSection.tsx","webpack://avi-sharvit/./src/open-source/components/OpenSourceSection/OpenSourceSection.module.css","webpack://avi-sharvit/./src/pages/open-source.tsx"],"sourcesContent":["import { IGithubRepository } from \"../types\";\n\nexport interface IGithubRepoResponse {\n  id: string;\n  name: string;\n  full_name: string;\n  description: string;\n  language: string;\n  html_url: string;\n  stargazers_count: number;\n  forks_count: number;\n  fork: boolean;\n  owner: {\n    login: string;\n  };\n}\n\nexport const fetchGithubProject = async (\n  projectId: string,\n): Promise<IGithubRepository> => {\n  const response = await fetch(`https://api.github.com/repos/${projectId}`);\n\n  const repository = (await response.json()) as IGithubRepoResponse;\n\n  return {\n    id: repository.id,\n    owner: repository.owner.login,\n    name: repository.name,\n    fullName: repository.full_name,\n    description: repository.description,\n    language: repository.language,\n    htmlUrl: repository.html_url,\n    stargazersCount: repository.stargazers_count,\n    forksCount: repository.forks_count,\n    fork: repository.fork,\n  };\n};\n\nexport const fetchGithubProjects = (projectIds: string[]) =>\n  Promise.all(projectIds.map((projectId) => fetchGithubProject(projectId)));\n","import { useMemo, useState, useEffect } from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nimport { fetchGithubProjects } from \"./utils\";\nimport { IGithubRepository } from \"./types\";\n\n// eslint-disable-next-line no-undef\ntype OpenSourceProjectsQuery = Queries.OpenSourceProjectsQuery;\n\nexport const useOpenSourceProjectsIds = (top?: number) => {\n  const response = useStaticQuery<OpenSourceProjectsQuery>(graphql`\n    query OpenSourceProjects {\n      file(\n        sourceInstanceName: { eq: \"bio\" }\n        name: { eq: \"open_source_projects\" }\n      ) {\n        childYaml {\n          open_source_projects\n        }\n      }\n    }\n  `);\n\n  const openSourceProjects = response.file?.childYaml\n    ?.open_source_projects as string[];\n\n  return useMemo(() => {\n    if (top) {\n      return openSourceProjects.slice(0, top);\n    }\n    return openSourceProjects;\n  }, [openSourceProjects, top]);\n};\n\nexport const useOpenSourceProjects = (top?: number) => {\n  const [openSourceProjects, setOpenSourceProjects] = useState<\n    IGithubRepository[]\n  >([]);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const openSourceProjectsIds = useOpenSourceProjectsIds(top);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      const projects = await fetchGithubProjects(openSourceProjectsIds);\n      setOpenSourceProjects(projects);\n\n      setIsLoading(false);\n    };\n\n    fetchData().catch((err) => {\n      setError((err as Error).message);\n      setIsLoading(false);\n    });\n  }, [openSourceProjectsIds]);\n\n  return {\n    openSourceProjectsIds,\n    openSourceProjects,\n    error,\n    isLoading,\n  };\n};\n","'use client';\nimport React from 'react';\n\n/**\n * @internal\n */\nconst SkeletonThemeContext = React.createContext({});\n\n/* eslint-disable react/no-array-index-key */\nconst defaultEnableAnimation = true;\n// For performance & cleanliness, don't add any inline styles unless we have to\nfunction styleOptionsToCssProperties({ baseColor, highlightColor, width, height, borderRadius, circle, direction, duration, enableAnimation = defaultEnableAnimation, }) {\n    const style = {};\n    if (direction === 'rtl')\n        style['--animation-direction'] = 'reverse';\n    if (typeof duration === 'number')\n        style['--animation-duration'] = `${duration}s`;\n    if (!enableAnimation)\n        style['--pseudo-element-display'] = 'none';\n    if (typeof width === 'string' || typeof width === 'number')\n        style.width = width;\n    if (typeof height === 'string' || typeof height === 'number')\n        style.height = height;\n    if (typeof borderRadius === 'string' || typeof borderRadius === 'number')\n        style.borderRadius = borderRadius;\n    if (circle)\n        style.borderRadius = '50%';\n    if (typeof baseColor !== 'undefined')\n        style['--base-color'] = baseColor;\n    if (typeof highlightColor !== 'undefined')\n        style['--highlight-color'] = highlightColor;\n    return style;\n}\nfunction Skeleton({ count = 1, wrapper: Wrapper, className: customClassName, containerClassName, containerTestId, circle = false, style: styleProp, ...originalPropsStyleOptions }) {\n    var _a, _b, _c;\n    const contextStyleOptions = React.useContext(SkeletonThemeContext);\n    const propsStyleOptions = { ...originalPropsStyleOptions };\n    // DO NOT overwrite style options from the context if `propsStyleOptions`\n    // has properties explicity set to undefined\n    for (const [key, value] of Object.entries(originalPropsStyleOptions)) {\n        if (typeof value === 'undefined') {\n            delete propsStyleOptions[key];\n        }\n    }\n    // Props take priority over context\n    const styleOptions = {\n        ...contextStyleOptions,\n        ...propsStyleOptions,\n        circle,\n    };\n    // `styleProp` has the least priority out of everything\n    const style = {\n        ...styleProp,\n        ...styleOptionsToCssProperties(styleOptions),\n    };\n    let className = 'react-loading-skeleton';\n    if (customClassName)\n        className += ` ${customClassName}`;\n    const inline = (_a = styleOptions.inline) !== null && _a !== void 0 ? _a : false;\n    const elements = [];\n    const countCeil = Math.ceil(count);\n    for (let i = 0; i < countCeil; i++) {\n        let thisStyle = style;\n        if (countCeil > count && i === countCeil - 1) {\n            // count is not an integer and we've reached the last iteration of\n            // the loop, so add a \"fractional\" skeleton.\n            //\n            // For example, if count is 3.5, we've already added 3 full\n            // skeletons, so now we add one more skeleton that is 0.5 times the\n            // original width.\n            const width = (_b = thisStyle.width) !== null && _b !== void 0 ? _b : '100%'; // 100% is the default since that's what's in the CSS\n            const fractionalPart = count % 1;\n            const fractionalWidth = typeof width === 'number'\n                ? width * fractionalPart\n                : `calc(${width} * ${fractionalPart})`;\n            thisStyle = { ...thisStyle, width: fractionalWidth };\n        }\n        const skeletonSpan = (React.createElement(\"span\", { className: className, style: thisStyle, key: i }, \"\\u200C\"));\n        if (inline) {\n            elements.push(skeletonSpan);\n        }\n        else {\n            // Without the <br />, the skeleton lines will all run together if\n            // `width` is specified\n            elements.push(React.createElement(React.Fragment, { key: i },\n                skeletonSpan,\n                React.createElement(\"br\", null)));\n        }\n    }\n    return (React.createElement(\"span\", { className: containerClassName, \"data-testid\": containerTestId, \"aria-live\": \"polite\", \"aria-busy\": (_c = styleOptions.enableAnimation) !== null && _c !== void 0 ? _c : defaultEnableAnimation }, Wrapper\n        ? elements.map((el, i) => React.createElement(Wrapper, { key: i }, el))\n        : elements));\n}\n\nfunction SkeletonTheme({ children, ...styleOptions }) {\n    return (React.createElement(SkeletonThemeContext.Provider, { value: styleOptions }, children));\n}\n\nexport { SkeletonTheme, Skeleton as default };\n","import React from \"react\";\n\nexport const ForksIcon = () => (\n  <svg\n    aria-label=\"forks\"\n    role=\"img\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n    version=\"1.1\"\n    width=\"16\"\n    data-view-component=\"true\"\n    className=\"octicon octicon-repo-forked\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878zm3.75 7.378a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm3-8.75a.75.75 0 100-1.5.75.75 0 000 1.5z\"\n    ></path>\n  </svg>\n);\n","import React from \"react\";\n\nexport const StarIcon = () => (\n  <svg\n    aria-label=\"stars\"\n    className=\"octicon octicon-star\"\n    viewBox=\"0 0 14 16\"\n    version=\"1.1\"\n    width=\"14\"\n    height=\"16\"\n    role=\"img\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74L14 6z\"\n    />\n  </svg>\n);\n","import React from \"react\";\n\nexport const TitleIcon = () => (\n  <svg\n    aria-hidden=\"true\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n    version=\"1.1\"\n    width=\"16\"\n    data-view-component=\"true\"\n    className=\"octicon octicon-repo mr-1 color-fg-muted\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z\"\n    ></path>\n  </svg>\n);\n","export function getProgramingLanguageColor(programingLanguage: string): string {\n  switch (programingLanguage) {\n    case \"TypeScript\":\n      return \"#2b7489\";\n    case \"JavaScript\":\n      return \"#f1e05a\";\n    case \"HTML\":\n      return \"#e34c26\";\n    case \"CSS\":\n      return \"#563d7c\";\n    case \"SCSS\":\n      return \"#c6538c\";\n    case \"Python\":\n      return \"#3572A5\";\n    case \"C#\":\n      return \"#178600\";\n    case \"C++\":\n      return \"#f34b7d\";\n    case \"Java\":\n      return \"#b07219\";\n    case \"PHP\":\n      return \"#4F5D95\";\n    case \"Ruby\":\n      return \"#701516\";\n    case \"Shell\":\n      return \"#89e051\";\n    default:\n      return \"#000\";\n  }\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport { getProgramingLanguageColor } from \"../../../utils\";\n\nimport * as styles from \"./LanguageIcon.module.css\";\n\nexport interface ILanguageIconProps {\n  programingLanguage: string;\n  className?: string;\n}\n\nexport const LanguageIcon = ({\n  programingLanguage,\n  className,\n}: ILanguageIconProps) => (\n  <span\n    className={classNames(styles.languageIcon, className)}\n    style={{ backgroundColor: getProgramingLanguageColor(programingLanguage) }}\n  ></span>\n);\n","// extracted by mini-css-extract-plugin\nexport var languageIcon = \"LanguageIcon-module--language-icon--ec3f0\";","// extracted by mini-css-extract-plugin\nexport var body = \"GithubCard-module--body--884ce\";\nexport var card = \"GithubCard-module--card--2b76c\";\nexport var footerItem = \"GithubCard-module--footer-item--08e40\";\nexport var languageIcon = \"GithubCard-module--language-icon--68462\";\nexport var owner = \"GithubCard-module--owner--7e362\";\nexport var repositoryName = \"GithubCard-module--repository-name--20a87\";\nexport var skeleton = \"GithubCard-module--skeleton--9a38d\";","import React, { useMemo } from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\n\nimport { IGithubRepository } from \"../../types\";\nimport { TitleIcon, LanguageIcon, StarIcon, ForksIcon } from \"./components\";\n\nimport * as styles from \"./GithubCard.module.css\";\n\nexport interface IGithubCardProps {\n  repositoryId: string;\n  repository?: IGithubRepository;\n}\n\nexport const GithubCard = ({ repositoryId, repository }: IGithubCardProps) => {\n  const [repositoryOwner, repositoryName] = useMemo(\n    () => repositoryId.split(\"/\"),\n    [repositoryId],\n  );\n\n  const repositoryUrl = useMemo(\n    () => `https://github.com/${repositoryOwner}/${repositoryName}`,\n    [repositoryOwner, repositoryName],\n  );\n\n  const isLoading = !repository;\n\n  return (\n    <article className={styles.card}>\n      <div className={styles.body}>\n        <h4>\n          <TitleIcon />\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={repositoryUrl}>\n            <span className={styles.owner}>{repositoryOwner}</span>/\n            <span className={styles.repositoryName}>{repositoryName}</span>\n          </a>\n        </h4>\n        <p>{isLoading ? <Skeleton count={2} /> : repository.description}</p>\n      </div>\n      {isLoading ? (\n        <footer className={styles.skeleton}>\n          <Skeleton />\n        </footer>\n      ) : (\n        <footer>\n          <span className={styles.footerItem}>\n            <LanguageIcon\n              className={styles.languageIcon}\n              programingLanguage={repository.language}\n            />{\" \"}\n            <span itemProp=\"programmingLanguage\">{repository.language}</span>\n          </span>\n          <a\n            href={`${repository.htmlUrl}/stargazers`}\n            className={styles.footerItem}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <StarIcon /> {repository.stargazersCount}\n          </a>\n          <a\n            href={`${repository.htmlUrl}/network/members`}\n            className={styles.footerItem}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <ForksIcon /> {repository.forksCount}\n          </a>\n        </footer>\n      )}\n    </article>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport classNames from \"classnames\";\n\nimport { GithubCard } from \"../GithubCard\";\nimport { useOpenSourceProjects } from \"../../hooks\";\n\nimport * as styles from \"./GithubCardsGrid.module.css\";\n\nexport interface IGithubCardsGridProps {\n  top?: number;\n  className?: string;\n}\n\nexport const GithubCardsGrid = ({ top, className }: IGithubCardsGridProps) => {\n  const { openSourceProjects, openSourceProjectsIds } =\n    useOpenSourceProjects(top);\n\n  const githubCards = useMemo(\n    () =>\n      openSourceProjectsIds.map((repositoryId, index) => {\n        const repository = openSourceProjects[index];\n\n        return (\n          <GithubCard\n            key={repositoryId}\n            repositoryId={repositoryId}\n            repository={repository}\n          />\n        );\n      }),\n    [openSourceProjectsIds, openSourceProjects],\n  );\n\n  return (\n    <div className={classNames(styles.githubCards, className)}>\n      {githubCards}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport var githubCards = \"GithubCardsGrid-module--github-cards--75d38\";","import React from \"react\";\n\nimport { Section } from \"../../../components\";\nimport { GithubCardsGrid } from \"../GithubCardsGrid\";\n\nimport * as styles from \"./OpenSourceSection.module.css\";\n\nexport const OpenSourceSection = () => (\n  <Section\n    title=\"Top Open Source Projects\"\n    footer=\"#all_open_source_projects\"\n    link=\"/open-source\"\n    className={styles.openSourceSection}\n  >\n    <GithubCardsGrid top={6} />\n  </Section>\n);\n","// extracted by mini-css-extract-plugin\nexport var openSourceSection = \"OpenSourceSection-module--open-source-section--bbab4\";","import React from \"react\";\n\nimport { Layout, Seo } from \"../components\";\nimport { GithubCardsGrid } from \"../open-source\";\n\nimport * as pageStyles from \"./page.module.css\";\n\nexport const Head = () => <Seo title=\"Open source projects\" />;\n\nexport default function OpenSourcePage() {\n  return (\n    <Layout className={pageStyles.pageFluid}>\n      <h2 className={pageStyles.pageTitleCentered}>Open Source Projects</h2>\n      <GithubCardsGrid className={pageStyles.fluidSection} />\n    </Layout>\n  );\n}\n"],"names":["fetchGithubProjects","projectIds","Promise","all","map","projectId","async","response","fetch","repository","json","id","owner","login","name","fullName","full_name","description","language","htmlUrl","html_url","stargazersCount","stargazers_count","forksCount","forks_count","fork","fetchGithubProject","useOpenSourceProjects","top","openSourceProjects","setOpenSourceProjects","useState","error","setError","isLoading","setIsLoading","openSourceProjectsIds","_response$file","_response$file$childY","useStaticQuery","file","childYaml","open_source_projects","useMemo","slice","useOpenSourceProjectsIds","useEffect","projects","fetchData","catch","err","message","SkeletonThemeContext","defaultEnableAnimation","styleOptionsToCssProperties","baseColor","highlightColor","width","height","borderRadius","circle","direction","duration","enableAnimation","style","Skeleton","count","wrapper","Wrapper","className","customClassName","containerClassName","containerTestId","styleProp","originalPropsStyleOptions","_a","_b","_c","contextStyleOptions","propsStyleOptions","key","value","Object","entries","styleOptions","inline","elements","countCeil","Math","ceil","i","thisStyle","fractionalPart","fractionalWidth","skeletonSpan","push","el","ForksIcon","React","role","viewBox","version","fill","fillRule","d","StarIcon","TitleIcon","getProgramingLanguageColor","programingLanguage","LanguageIcon","_ref","classNames","backgroundColor","footerItem","GithubCard","repositoryId","repositoryOwner","repositoryName","split","repositoryUrl","target","rel","href","styles","itemProp","GithubCardsGrid","githubCards","index","OpenSourceSection","Section","title","footer","link","Head","Seo","OpenSourcePage","Layout","pageStyles"],"sourceRoot":""}