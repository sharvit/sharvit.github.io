{"version":3,"sources":["webpack:///./src/components/Profile/ProfileSection/ProfileSection.module.scss","webpack:///./src/components/Blog/LatestBlogPostsSection.module.scss","webpack:///./src/components/Blog/BlogPostList/BlogPostListItem.module.scss","webpack:///./src/components/OpenSource/LatestOpenSourceSection/LatestOpenSourceSection.js","webpack:///./src/components/OpenSource/LatestOpenSourceSection/index.js","webpack:///./src/components/Blog/LatestBlogPostsSection.js","webpack:///./src/pages/index.js","webpack:///./src/components/Profile/ProfileSection/ProfileBackground/ProfileBackground.js","webpack:///./src/components/Profile/ProfileSection/ProfileBackground/index.js","webpack:///./src/components/Profile/ProfileSection/ProfileIconLinks/ProfileIconLinks.js","webpack:///./src/components/Profile/ProfileSection/ProfileIconLinks/index.js","webpack:///./src/components/Profile/ProfileSection/ProfileIconLinks/ProfileIconLinksData.js","webpack:///./src/components/Profile/ProfileSection/ProfileSection.js","webpack:///./src/components/Profile/ProfileSection/index.js","webpack:///./src/components/Profile/ProfileSection/ProfileSectionData.js","webpack:///./src/components/Profile/ProfileSection/ProfileIconLinks/ProfileIconLinks.module.scss","webpack:///./src/components/Profile/ProfileSection/ProfileBackground/ProfileBackground.module.scss","webpack:///./src/components/Blog/BlogPostList/BlogPostListItem.js","webpack:///./src/components/Blog/BlogData.js","webpack:///./src/components/Blog/BlogPostList/BlogPostListData.js","webpack:///./src/components/Blog/BlogPostList/BlogPostList.js","webpack:///./src/components/Blog/BlogPostList/index.js","webpack:///./src/components/OpenSource/LatestOpenSourceSection/LatestOpenSourceSection.module.scss"],"names":["module","exports","LatestOpenSourceSection","repositories","isLoading","className","classNames","styles","container","Array","map","i","key","OpenSourceCard","repository","name","to","defaultProps","Component","useOpenSourceProjects","openSourceProjects","error","LatestBlogPostsSection","BlogPostList","limit","morePostsRow","IndexPage","Layout","transparent","SEO","ProfileSection","button","ProfileBackground","navbarCollapsed","filter","props","collapse","useContext","LayoutContext","navigation","ProfileIconLinks","socialLinks","id","label","link","pdfLink","buttonClassName","iconClassName","Fragment","href","data-pdf-link","target","rel","icon","useStaticQuery","site","siteMetadata","description","avatar","bio","buttonNode","onClick","window","print","profileSection","ownerAvatar","src","alt","owner","ownerContact","ownerAbout","dangerouslySetInnerHTML","__html","resumeButton","title","author","file","childMarkdownRemark","html","BlogPostListItem","coverImage","path","date","excerpt","article","fluid","objectFit","objectPosition","dateTime","toJSON","toDateString","articleContent","readMoreButton","Date","fileToBlogPost","node","frontmatter","coverImageFile","formatBlogPost","split","year","month","day","childImageSharp","useBlogPostsList","allFile","edges","slice","post"],"mappings":"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","file":"component---src-pages-index-js-947b3971931869988c5e.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileSection\":\"ProfileSection-module--profile-section--2skfJ\",\"ownerAvatar\":\"ProfileSection-module--owner-avatar--34asy\",\"avatar\":\"ProfileSection-module--avatar--2ruGm\",\"owner\":\"ProfileSection-module--owner--3QRsL\",\"name\":\"ProfileSection-module--name--vU92U\",\"ownerContact\":\"ProfileSection-module--owner-contact--2lN93\",\"ownerAbout\":\"ProfileSection-module--owner-about--3XxYB\",\"resumeButton\":\"ProfileSection-module--resume-button--uzLu2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LatestBlogPostsSection-module--container--IIh_6\",\"morePostsRow\":\"LatestBlogPostsSection-module--more-posts-row--1xQ8x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"article\":\"BlogPostListItem-module--article--3wCBE\",\"title\":\"BlogPostListItem-module--title--2Z99V\",\"articleContent\":\"BlogPostListItem-module--article-content--3DMTr\",\"readMoreButton\":\"BlogPostListItem-module--read-more-button--JuA0_\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Link } from 'gatsby';\n\nimport OpenSourceCard from '../OpenSourceCard';\n\nimport styles from './LatestOpenSourceSection.module.scss';\n\nconst LatestOpenSourceSection = ({ repositories, isLoading }) => (\n  <section\n    className={classNames(\n      'section posts-section section-light-brown',\n      styles.container\n    )}\n  >\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-10 col-md-offset-1\">\n          <div className=\"text-center\">\n            <h2>Top Open Source Projects</h2>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row open-source open-source-section\">\n        {isLoading\n          ? [...Array(6)].map((i) => (\n              <div className=\"col-md-4\" key={i}>\n                <OpenSourceCard isLoading />\n              </div>\n            ))\n          : repositories.map((repository) => (\n              <div className=\"col-md-4\" key={repository.name}>\n                <OpenSourceCard {...repository} />\n              </div>\n            ))}\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-10 col-md-offset-1\">\n          <div className=\"text-center\">\n            <Link to=\"/open-source\" className=\"btn btn-default btn-fill btn-lg\">\n              All Open Source Projects\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n);\n\nLatestOpenSourceSection.propTypes = {\n  isLoading: PropTypes.bool,\n  repositories: PropTypes.arrayOf(\n    PropTypes.shape({\n      ...OpenSourceCard.propTypes,\n    })\n  ),\n};\n\nLatestOpenSourceSection.defaultProps = {\n  isLoading: false,\n  repositories: [],\n};\n\nexport default LatestOpenSourceSection;\n","import React from 'react';\n\nimport { useOpenSourceProjects } from '../OpenSourceData';\nimport LatestOpenSourceSection from './LatestOpenSourceSection';\n\nconst Component = () => {\n  const { openSourceProjects, error, isLoading } = useOpenSourceProjects(6);\n\n  return (\n    <LatestOpenSourceSection\n      repositories={openSourceProjects}\n      isLoading={isLoading}\n      error={error}\n    />\n  );\n};\nexport default Component;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Link } from 'gatsby';\n\nimport BlogPostList from './BlogPostList';\nimport styles from './LatestBlogPostsSection.module.scss';\n\nconst LatestBlogPostsSection = () => (\n  <section className={classNames('section section-white', styles.container)}>\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-10 col-md-offset-1\">\n          <div className=\"text-center\">\n            <h2>Latest Blog Posts</h2>\n          </div>\n        </div>\n      </div>\n\n      <BlogPostList limit={5} />\n\n      <div className={classNames('row', styles.morePostsRow)}>\n        <div className=\"col-md-10 col-md-offset-1\">\n          <div className=\"text-center\">\n            <Link to=\"/blog\" className=\"btn btn-fill btn-primary btn-lg\">\n              All Blog Posts\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n);\n\nexport default LatestBlogPostsSection;\n","import React from 'react';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport ProfileSection from '../components/Profile/ProfileSection';\nimport LatestOpenSourceSection from '../components/OpenSource/LatestOpenSourceSection';\nimport LatestBlogPostsSection from '../components/Blog/LatestBlogPostsSection';\n\nconst IndexPage = () => (\n  <Layout transparent>\n    <SEO />\n    <ProfileSection button=\"navigate\" />\n    <LatestOpenSourceSection />\n    <LatestBlogPostsSection />\n  </Layout>\n);\n\nexport default IndexPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport styles from './ProfileBackground.module.scss';\n\nconst ProfileBackground = ({ navbarCollapsed }) => (\n  <div\n    className={classNames(styles.container, {\n      [styles.navbarCollapsed]: navbarCollapsed,\n    })}\n  >\n    <div className={styles.filter} />\n  </div>\n);\n\nProfileBackground.propTypes = {\n  navbarCollapsed: PropTypes.bool,\n};\n\nProfileBackground.defaultProps = {\n  navbarCollapsed: false,\n};\n\nexport default ProfileBackground;\n","import React, { useContext } from 'react';\nimport LayoutContext from '../../../Layout/LayoutContext';\nimport ProfileBackground from './ProfileBackground';\n\nconst Component = (props) => {\n  const {\n    navigation: { collapse },\n  } = useContext(LayoutContext);\n\n  return <ProfileBackground navbarCollapsed={collapse} {...props} />;\n};\n\nexport default Component;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { OutboundLink } from 'gatsby-plugin-google-analytics';\n\nimport styles from './ProfileIconLinks.module.scss';\n\nconst ProfileIconLinks = ({ socialLinks }) => (\n  <p className={styles.container}>\n    {socialLinks.map(\n      ({ id, label, link, pdfLink, buttonClassName, iconClassName }) => (\n        <React.Fragment key={id}>\n          <OutboundLink\n            className={classNames(buttonClassName, styles.button)}\n            href={link}\n            data-pdf-link={pdfLink || link}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className={classNames(iconClassName, styles.icon)} />\n            <span className={styles.label}>{label}:</span>{' '}\n          </OutboundLink>{' '}\n        </React.Fragment>\n      )\n    )}\n  </p>\n);\n\nProfileIconLinks.propTypes = {\n  socialLinks: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      label: PropTypes.string,\n      link: PropTypes.string,\n      pdfLink: PropTypes.string,\n      buttonClassName: PropTypes.string,\n      iconClassName: PropTypes.string,\n    })\n  ),\n};\n\nProfileIconLinks.defaultProps = {\n  socialLinks: [],\n};\n\nexport default ProfileIconLinks;\n","import React from 'react';\n\nimport { useSocialLinks } from './ProfileIconLinksData';\nimport ProfileIconLinks from './ProfileIconLinks';\n\nexport default () => {\n  const socialLinks = useSocialLinks();\n\n  return <ProfileIconLinks socialLinks={socialLinks} />;\n};\n","import { useStaticQuery, graphql } from 'gatsby';\n\nexport const useSocialLinks = () =>\n  useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            socialLinks {\n              id\n              label\n              link\n              pdfLink\n              buttonClassName\n              iconClassName\n            }\n          }\n        }\n      }\n    `\n  ).site.siteMetadata.socialLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nimport ProfileBackground from './ProfileBackground';\nimport ProfileIconLinks from './ProfileIconLinks';\n\nimport styles from './ProfileSection.module.scss';\n\nconst ProfileSection = ({ name, description, avatar, bio, button }) => {\n  let buttonNode = null;\n\n  if (button === 'navigate') {\n    buttonNode = (\n      <Link to=\"/about\" className=\"btn btn-danger btn-fill\">\n        SEE FULL BIO\n      </Link>\n    );\n  }\n\n  if (button === 'download') {\n    buttonNode = (\n      <button\n        onClick={() => window.print()}\n        className=\"btn btn-danger btn-fill\"\n      >\n        DOWNLOAD RESUME PDF\n      </button>\n    );\n  }\n\n  return (\n    <>\n      <ProfileBackground />\n      <header className={`${styles.profileSection} section-nude`}>\n        <div className=\"container\">\n          <div className={`row ${styles.ownerAvatar}`}>\n            <div className=\"col-md-2 col-md-offset-5 col-sm-4 col-sm-offset-4 col-xs-6 col-xs-offset-3 text-center\">\n              <div className={styles.avatar}>\n                <img\n                  src={avatar}\n                  alt=\"Avi Sharvit Avatar\"\n                  className=\"img-circle img-no-padding img-responsive\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className={`row ${styles.owner}`}>\n            <div className=\"col-md-6 col-md-offset-3 text-center\">\n              <h1 className={styles.name}>\n                {name}\n                <br />\n                <small>{description}</small>\n              </h1>\n            </div>\n          </div>\n          <div className={`row ${styles.ownerContact}`}>\n            <div className=\"col-md-6 col-md-offset-3 text-center\">\n              <ProfileIconLinks />\n            </div>\n          </div>\n          <div className={`row ${styles.ownerAbout}`}>\n            <div className=\"col-md-6 col-md-offset-3 text-center\">\n              <div dangerouslySetInnerHTML={{ __html: bio }} />\n              <div className={styles.resumeButton}>{buttonNode}</div>\n            </div>\n          </div>\n        </div>\n      </header>\n    </>\n  );\n};\n\nProfileSection.propTypes = {\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  avatar: PropTypes.string.isRequired,\n  bio: PropTypes.string.isRequired,\n  button: PropTypes.oneOf(['navigate', 'print']),\n};\n\nProfileSection.defaultProps = {\n  button: null,\n};\n\nexport default ProfileSection;\n","import React from 'react';\nimport { useProfileData } from './ProfileSectionData';\nimport ProfileSection from './ProfileSection';\n\nconst Component = (props) => {\n  const { title, description, avatar, bio } = useProfileData();\n\n  return (\n    <ProfileSection\n      name={title}\n      description={description}\n      avatar={avatar}\n      bio={bio}\n      {...props}\n    />\n  );\n};\n\nexport default Component;\n","import { useStaticQuery, graphql } from 'gatsby';\n\nexport const useProfileData = () => {\n  const {\n    site: {\n      siteMetadata: {\n        title,\n        description,\n        author: { avatar },\n      },\n    },\n    file: {\n      childMarkdownRemark: { html: bio },\n    },\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          author {\n            avatar\n          }\n        }\n      }\n      file(sourceInstanceName: { eq: \"bio\" }, name: { eq: \"short-bio\" }) {\n        childMarkdownRemark {\n          html\n        }\n      }\n    }\n  `);\n\n  return { title, description, avatar, bio };\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProfileIconLinks-module--container--GPA_A\",\"button\":\"ProfileIconLinks-module--button--1gLrk\",\"icon\":\"ProfileIconLinks-module--icon--3EE7x\",\"label\":\"ProfileIconLinks-module--label--1mIUL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProfileBackground-module--container--38AFp\",\"navbarCollapsed\":\"ProfileBackground-module--navbarCollapsed--1RmC4\",\"filter\":\"ProfileBackground-module--filter--3m7yw\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Link } from 'gatsby';\nimport Image from 'gatsby-image';\n\nimport styles from './BlogPostListItem.module.scss';\n\nconst BlogPostListItem = ({ title, coverImage, path, date, excerpt }) => (\n  <article className={styles.article}>\n    <div className=\"row\">\n      <div className=\"col-md-10 col-md-offset-1\">\n        <div className=\"text-center\">\n          <Link to={path}>\n            {coverImage && (\n              <Image\n                fluid={coverImage}\n                objectFit=\"cover\"\n                objectPosition=\"50% 50%\"\n                alt={title}\n              />\n            )}\n            <h2 className={styles.title}>{title}</h2>\n          </Link>\n          <div className=\"title-uppercase\">\n            <time dateTime={date.toJSON()}>{date.toDateString()}</time>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-md-8 col-md-offset-2\">\n        <div className={styles.articleContent}>\n          <p>{excerpt}</p>\n          <Link\n            to={path}\n            className={classNames(\n              'btn btn-simple btn-primary',\n              styles.readMoreButton\n            )}\n          >\n            READ MORE\n          </Link>\n        </div>\n      </div>\n    </div>\n  </article>\n);\n\nBlogPostListItem.propTypes = {\n  title: PropTypes.string,\n  coverImage: PropTypes.object,\n  path: PropTypes.string,\n  date: PropTypes.instanceOf(Date),\n  excerpt: PropTypes.string,\n};\n\nBlogPostListItem.defaultProps = {\n  title: '',\n  coverImage: null,\n  path: '',\n  date: new Date(),\n  excerpt: '',\n};\n\nexport default BlogPostListItem;\n","import { useStaticQuery, graphql } from 'gatsby';\n\nexport const useBlogPosts = () =>\n  useStaticQuery(\n    graphql`\n      {\n        allFile(\n          filter: { sourceInstanceName: { eq: \"posts\" } }\n          sort: { order: DESC, fields: name }\n          limit: 1000\n        ) {\n          edges {\n            node {\n              name\n              childMarkdownRemark {\n                excerpt\n                frontmatter {\n                  title\n                  coverImage {\n                    childImageSharp {\n                      fluid(maxHeight: 500, maxWidth: 1200) {\n                        base64\n                        tracedSVG\n                        aspectRatio\n                        src\n                        srcSet\n                        srcWebp\n                        srcSetWebp\n                        sizes\n                        originalImg\n                        originalName\n                        presentationWidth\n                        presentationHeight\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `\n  ).allFile.edges.map(fileToBlogPost);\n\nexport const fileToBlogPost = ({\n  node: {\n    name,\n    childMarkdownRemark: {\n      excerpt,\n      frontmatter: { title, coverImage: coverImageFile },\n    },\n  },\n}) => formatBlogPost({ name, title, excerpt, coverImageFile });\n\nexport const formatBlogPost = ({ name, title, excerpt, coverImageFile }) => {\n  const [year, month, day] = name.split('-');\n  const date = new Date(`${year}-${month}-${day}`);\n\n  const coverImage = coverImageFile && coverImageFile.childImageSharp.fluid;\n\n  return {\n    title,\n    date,\n    excerpt,\n    coverImage,\n    path: `/blog/${name}`,\n  };\n};\n","import { useBlogPosts } from '../BlogData';\n\nexport const useBlogPostsList = (limit) => useBlogPosts().slice(0, limit);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport BlogPostListItem from './BlogPostListItem';\nimport { useBlogPostsList } from './BlogPostListData';\n\nconst BlogPostList = ({ limit }) => (\n  <div className=\"articles\">\n    {useBlogPostsList(limit).map((post) => (\n      <BlogPostListItem key={post.path} {...post} />\n    ))}\n  </div>\n);\n\nBlogPostList.propTypes = {\n  limit: PropTypes.number,\n};\n\nBlogPostList.defaultProps = {\n  limit: 1000,\n};\n\nexport default BlogPostList;\n","import BlogPostList from './BlogPostList';\n\nexport default BlogPostList;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LatestOpenSourceSection-module--container--3Zpy9\"};"],"sourceRoot":""}