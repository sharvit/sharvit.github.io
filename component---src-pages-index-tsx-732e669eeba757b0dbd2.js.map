{"version":3,"file":"component---src-pages-index-tsx-732e669eeba757b0dbd2.js","mappings":"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","sources":["webpack://avi-sharvit/./src/blog/utils.ts","webpack://avi-sharvit/./src/blog/hooks.ts","webpack://avi-sharvit/./src/blog/components/BlogPost/BlogPost.tsx","webpack://avi-sharvit/./src/blog/components/BlogPost/BlogPost.module.css","webpack://avi-sharvit/./src/blog/components/BlogPostListItem/BlogPostListItem.tsx","webpack://avi-sharvit/./src/blog/components/BlogPostListItem/BlogPostListItem.module.css","webpack://avi-sharvit/./src/blog/components/BlogPostList/BlogPostList.tsx","webpack://avi-sharvit/./src/blog/components/BlogSection/BlogSection.tsx","webpack://avi-sharvit/./src/blog/components/BlogSection/BlogSection.module.css","webpack://avi-sharvit/./src/open-source/utils/githubFetcher.ts","webpack://avi-sharvit/./src/open-source/hooks.ts","webpack://avi-sharvit/./node_modules/react-loading-skeleton/dist/index.js","webpack://avi-sharvit/./src/open-source/components/GithubCard/components/ForksIcon.tsx","webpack://avi-sharvit/./src/open-source/components/GithubCard/components/StarIcon.tsx","webpack://avi-sharvit/./src/open-source/components/GithubCard/components/TitleIcon.tsx","webpack://avi-sharvit/./src/open-source/utils/getProgramingLanguageColor.ts","webpack://avi-sharvit/./src/open-source/components/GithubCard/components/LanguageIcon.tsx","webpack://avi-sharvit/./src/open-source/components/GithubCard/components/LanguageIcon.module.css","webpack://avi-sharvit/./src/open-source/components/GithubCard/GithubCard.module.css","webpack://avi-sharvit/./src/open-source/components/GithubCard/GithubCard.tsx","webpack://avi-sharvit/./src/open-source/components/GithubCardsGrid/GithubCardsGrid.tsx","webpack://avi-sharvit/./src/open-source/components/GithubCardsGrid/GithubCardsGrid.module.css","webpack://avi-sharvit/./src/open-source/components/OpenSourceSection/OpenSourceSection.tsx","webpack://avi-sharvit/./src/open-source/components/OpenSourceSection/OpenSourceSection.module.css","webpack://avi-sharvit/./src/pages/index.tsx"],"sourcesContent":["import { IBlogPost, PostFileFragment } from './types';\n\nexport const getDateFromName = (name: string): Date => {\n  const [year, month, day] = name.split('-');\n  return new Date(`${year}-${month}-${day}`);\n};\n\nexport const mapBlogPostData = (data: PostFileFragment): IBlogPost => ({\n  name: data.name,\n  title: data.childMarkdownRemark?.frontmatter?.title || '',\n  date: getDateFromName(data.name),\n  url: `/blog/${data.name}`,\n  excerpt: data.childMarkdownRemark?.excerpt || '',\n  html: data.childMarkdownRemark?.html || '',\n  coverImage:\n    data.childMarkdownRemark?.frontmatter?.coverImage?.childImageSharp ||\n    undefined,\n});\n","import { useStaticQuery, graphql } from 'gatsby';\nimport { useMemo } from 'react';\n\nimport { GetBlogPostsQuery, IBlogPost, PostFileFragment } from './types';\nimport { mapBlogPostData } from './utils';\n\nexport const useGetBlogPostsQuery = (top?: number) => {\n  const postFileFragments = useStaticQuery<GetBlogPostsQuery>(graphql`\n    query GetBlogPosts {\n      allFile(\n        filter: { sourceInstanceName: { eq: \"posts\" } }\n        sort: { order: DESC, fields: name }\n        limit: 10000\n      ) {\n        nodes {\n          ...PostFile\n        }\n      }\n    }\n  `).allFile.nodes as PostFileFragment[];\n\n  return useMemo(() => {\n    if (top) {\n      return postFileFragments.slice(0, top);\n    }\n    return postFileFragments;\n  }, [postFileFragments, top]);\n};\n\nexport const useBlogPosts = (top?: number): IBlogPost[] => {\n  const data = useGetBlogPostsQuery(top);\n\n  return data.map(mapBlogPostData);\n};\n","import React, { useMemo } from 'react';\n\nimport * as styles from './BlogPost.module.css';\n\nexport interface IBlogPostProps {\n  title: string;\n  date: Date;\n  html: string;\n}\n\nexport const BlogPost = ({ title, date, html }: IBlogPostProps) => {\n  const dateString = useMemo(() => date.toDateString(), [date]);\n  const dateJson = useMemo(() => date.toJSON(), [date]);\n\n  return (\n    <article className={styles.post}>\n      <header>\n        <h1>{title}</h1>\n        <time dateTime={dateJson}>{dateString}</time>\n      </header>\n      <div\n        className={styles.postContent}\n        dangerouslySetInnerHTML={{ __html: html }}\n      />\n    </article>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport var post = \"BlogPost-module--post--b8740\";\nexport var postContent = \"BlogPost-module--postContent--2fb97\";","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport { IBlogPost } from '../../types';\nimport { CoverImage } from '../../../components/Layout/components/CoverImage';\n\nimport * as styles from './BlogPostListItem.module.css';\n\nexport interface IBlogPostListItemProps {\n  blogPost: IBlogPost;\n}\n\nexport function BlogPostListItem({\n  blogPost: { title, date, url, excerpt, coverImage },\n}: IBlogPostListItemProps) {\n  return (\n    <article className={styles.blogPostItem}>\n      <header>\n        {coverImage && (\n          <Link to={url}>\n            <CoverImage alt={title} image={coverImage} />\n          </Link>\n        )}\n        <Link to={url}>\n          <h3>{title}</h3>\n        </Link>\n        <time dateTime={date.toJSON()}>{date.toDateString()}</time>\n      </header>\n      <p>{excerpt}</p>\n      <footer>\n        <Link to={url}>#read_more</Link>\n      </footer>\n    </article>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport var blogPostItem = \"BlogPostListItem-module--blog-post-item--9faee\";","import React from 'react';\n\nimport { BlogPostListItem } from '../BlogPostListItem';\nimport { useBlogPosts } from '../../hooks';\n\nexport interface IBlogPostListProps {\n  top?: number;\n}\n\nexport const BlogPostList = ({ top }: IBlogPostListProps) => {\n  const blogPosts = useBlogPosts(top);\n\n  return (\n    <>\n      {blogPosts.map((blogPost) => (\n        <BlogPostListItem key={blogPost.name} blogPost={blogPost} />\n      ))}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Section } from '../../../components';\nimport { BlogPostList } from '../BlogPostList';\n\nimport * as styles from './BlogSection.module.css';\n\nexport const BlogSection = () => (\n  <Section\n    title=\"Latest Blog Posts\"\n    footer=\"#all_blog_posts\"\n    link=\"/blog\"\n    className={styles.blogSection}\n  >\n    <BlogPostList top={5} />\n  </Section>\n);\n","// extracted by mini-css-extract-plugin\nexport var blogSection = \"BlogSection-module--blog-section--8f530\";","import { IGithubRepository } from '../types';\n\nexport interface IGithubRepoResponse {\n  id: string;\n  name: string;\n  full_name: string;\n  description: string;\n  language: string;\n  html_url: string;\n  stargazers_count: number;\n  forks_count: number;\n  fork: boolean;\n  owner: {\n    login: string;\n  };\n}\n\nexport const fetchGithubProject = async (\n  projectId: string\n): Promise<IGithubRepository> => {\n  const response = await fetch(`https://api.github.com/repos/${projectId}`);\n\n  const repository = (await response.json()) as IGithubRepoResponse;\n\n  return {\n    id: repository.id,\n    owner: repository.owner.login,\n    name: repository.name,\n    fullName: repository.full_name,\n    description: repository.description,\n    language: repository.language,\n    htmlUrl: repository.html_url,\n    stargazersCount: repository.stargazers_count,\n    forksCount: repository.forks_count,\n    fork: repository.fork,\n  };\n};\n\nexport const fetchGithubProjects = (projectIds: string[]) =>\n  Promise.all(projectIds.map((projectId) => fetchGithubProject(projectId)));\n","import { useMemo, useState, useEffect } from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport { fetchGithubProjects } from './utils';\nimport { IGithubRepository } from './types';\n\n// eslint-disable-next-line no-undef\ntype OpenSourceProjectsQuery = Queries.OpenSourceProjectsQuery;\n\nexport const useOpenSourceProjectsIds = (top?: number) => {\n  const response = useStaticQuery<OpenSourceProjectsQuery>(graphql`\n    query OpenSourceProjects {\n      file(\n        sourceInstanceName: { eq: \"bio\" }\n        name: { eq: \"open_source_projects\" }\n      ) {\n        childYaml {\n          open_source_projects\n        }\n      }\n    }\n  `);\n\n  const openSourceProjects = response.file?.childYaml\n    ?.open_source_projects as string[];\n\n  return useMemo(() => {\n    if (top) {\n      return openSourceProjects.slice(0, top);\n    }\n    return openSourceProjects;\n  }, [openSourceProjects, top]);\n};\n\nexport const useOpenSourceProjects = (top?: number) => {\n  const [openSourceProjects, setOpenSourceProjects] = useState<\n    IGithubRepository[]\n  >([]);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const openSourceProjectsIds = useOpenSourceProjectsIds(top);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      const projects = await fetchGithubProjects(openSourceProjectsIds);\n      setOpenSourceProjects(projects);\n\n      setIsLoading(false);\n    };\n\n    fetchData().catch((err) => {\n      setError((err as Error).message);\n      setIsLoading(false);\n    });\n  }, [openSourceProjectsIds]);\n\n  return {\n    openSourceProjectsIds,\n    openSourceProjects,\n    error,\n    isLoading,\n  };\n};\n","'use client';\nimport React from 'react';\n\n/**\n * @internal\n */\nconst SkeletonThemeContext = React.createContext({});\n\n/* eslint-disable react/no-array-index-key */\nconst defaultEnableAnimation = true;\n// For performance & cleanliness, don't add any inline styles unless we have to\nfunction styleOptionsToCssProperties({ baseColor, highlightColor, width, height, borderRadius, circle, direction, duration, enableAnimation = defaultEnableAnimation, }) {\n    const style = {};\n    if (direction === 'rtl')\n        style['--animation-direction'] = 'reverse';\n    if (typeof duration === 'number')\n        style['--animation-duration'] = `${duration}s`;\n    if (!enableAnimation)\n        style['--pseudo-element-display'] = 'none';\n    if (typeof width === 'string' || typeof width === 'number')\n        style.width = width;\n    if (typeof height === 'string' || typeof height === 'number')\n        style.height = height;\n    if (typeof borderRadius === 'string' || typeof borderRadius === 'number')\n        style.borderRadius = borderRadius;\n    if (circle)\n        style.borderRadius = '50%';\n    if (typeof baseColor !== 'undefined')\n        style['--base-color'] = baseColor;\n    if (typeof highlightColor !== 'undefined')\n        style['--highlight-color'] = highlightColor;\n    return style;\n}\nfunction Skeleton({ count = 1, wrapper: Wrapper, className: customClassName, containerClassName, containerTestId, circle = false, style: styleProp, ...originalPropsStyleOptions }) {\n    var _a, _b, _c;\n    const contextStyleOptions = React.useContext(SkeletonThemeContext);\n    const propsStyleOptions = { ...originalPropsStyleOptions };\n    // DO NOT overwrite style options from the context if `propsStyleOptions`\n    // has properties explicity set to undefined\n    for (const [key, value] of Object.entries(originalPropsStyleOptions)) {\n        if (typeof value === 'undefined') {\n            delete propsStyleOptions[key];\n        }\n    }\n    // Props take priority over context\n    const styleOptions = {\n        ...contextStyleOptions,\n        ...propsStyleOptions,\n        circle,\n    };\n    // `styleProp` has the least priority out of everything\n    const style = {\n        ...styleProp,\n        ...styleOptionsToCssProperties(styleOptions),\n    };\n    let className = 'react-loading-skeleton';\n    if (customClassName)\n        className += ` ${customClassName}`;\n    const inline = (_a = styleOptions.inline) !== null && _a !== void 0 ? _a : false;\n    const elements = [];\n    const countCeil = Math.ceil(count);\n    for (let i = 0; i < countCeil; i++) {\n        let thisStyle = style;\n        if (countCeil > count && i === countCeil - 1) {\n            // count is not an integer and we've reached the last iteration of\n            // the loop, so add a \"fractional\" skeleton.\n            //\n            // For example, if count is 3.5, we've already added 3 full\n            // skeletons, so now we add one more skeleton that is 0.5 times the\n            // original width.\n            const width = (_b = thisStyle.width) !== null && _b !== void 0 ? _b : '100%'; // 100% is the default since that's what's in the CSS\n            const fractionalPart = count % 1;\n            const fractionalWidth = typeof width === 'number'\n                ? width * fractionalPart\n                : `calc(${width} * ${fractionalPart})`;\n            thisStyle = { ...thisStyle, width: fractionalWidth };\n        }\n        const skeletonSpan = (React.createElement(\"span\", { className: className, style: thisStyle, key: i }, \"\\u200C\"));\n        if (inline) {\n            elements.push(skeletonSpan);\n        }\n        else {\n            // Without the <br />, the skeleton lines will all run together if\n            // `width` is specified\n            elements.push(React.createElement(React.Fragment, { key: i },\n                skeletonSpan,\n                React.createElement(\"br\", null)));\n        }\n    }\n    return (React.createElement(\"span\", { className: containerClassName, \"data-testid\": containerTestId, \"aria-live\": \"polite\", \"aria-busy\": (_c = styleOptions.enableAnimation) !== null && _c !== void 0 ? _c : defaultEnableAnimation }, Wrapper\n        ? elements.map((el, i) => React.createElement(Wrapper, { key: i }, el))\n        : elements));\n}\n\nfunction SkeletonTheme({ children, ...styleOptions }) {\n    return (React.createElement(SkeletonThemeContext.Provider, { value: styleOptions }, children));\n}\n\nexport { SkeletonTheme, Skeleton as default };\n","import React from 'react';\n\nexport const ForksIcon = () => (\n  <svg\n    aria-label=\"forks\"\n    role=\"img\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n    version=\"1.1\"\n    width=\"16\"\n    data-view-component=\"true\"\n    className=\"octicon octicon-repo-forked\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878zm3.75 7.378a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm3-8.75a.75.75 0 100-1.5.75.75 0 000 1.5z\"\n    ></path>\n  </svg>\n);\n","import React from 'react';\n\nexport const StarIcon = () => (\n  <svg\n    aria-label=\"stars\"\n    className=\"octicon octicon-star\"\n    viewBox=\"0 0 14 16\"\n    version=\"1.1\"\n    width=\"14\"\n    height=\"16\"\n    role=\"img\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74L14 6z\"\n    />\n  </svg>\n);\n","import React from 'react';\n\nexport const TitleIcon = () => (\n  <svg\n    aria-hidden=\"true\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n    version=\"1.1\"\n    width=\"16\"\n    data-view-component=\"true\"\n    className=\"octicon octicon-repo mr-1 color-fg-muted\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z\"\n    ></path>\n  </svg>\n);\n","export function getProgramingLanguageColor(programingLanguage: string): string {\n  switch (programingLanguage) {\n    case 'TypeScript':\n      return '#2b7489';\n    case 'JavaScript':\n      return '#f1e05a';\n    case 'HTML':\n      return '#e34c26';\n    case 'CSS':\n      return '#563d7c';\n    case 'SCSS':\n      return '#c6538c';\n    case 'Python':\n      return '#3572A5';\n    case 'C#':\n      return '#178600';\n    case 'C++':\n      return '#f34b7d';\n    case 'Java':\n      return '#b07219';\n    case 'PHP':\n      return '#4F5D95';\n    case 'Ruby':\n      return '#701516';\n    case 'Shell':\n      return '#89e051';\n    default:\n      return '#000';\n  }\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { getProgramingLanguageColor } from '../../../utils';\n\nimport * as styles from './LanguageIcon.module.css';\n\nexport interface ILanguageIconProps {\n  programingLanguage: string;\n  className?: string;\n}\n\nexport const LanguageIcon = ({\n  programingLanguage,\n  className,\n}: ILanguageIconProps) => (\n  <span\n    className={classNames(styles.languageIcon, className)}\n    style={{ backgroundColor: getProgramingLanguageColor(programingLanguage) }}\n  ></span>\n);\n","// extracted by mini-css-extract-plugin\nexport var languageIcon = \"LanguageIcon-module--language-icon--ec3f0\";","// extracted by mini-css-extract-plugin\nexport var body = \"GithubCard-module--body--884ce\";\nexport var card = \"GithubCard-module--card--2b76c\";\nexport var footerItem = \"GithubCard-module--footer-item--08e40\";\nexport var languageIcon = \"GithubCard-module--language-icon--68462\";\nexport var owner = \"GithubCard-module--owner--7e362\";\nexport var repositoryName = \"GithubCard-module--repository-name--20a87\";\nexport var skeleton = \"GithubCard-module--skeleton--9a38d\";","import React, { useMemo } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { IGithubRepository } from '../../types';\nimport { TitleIcon, LanguageIcon, StarIcon, ForksIcon } from './components';\n\nimport * as styles from './GithubCard.module.css';\n\nexport interface IGithubCardProps {\n  repositoryId: string;\n  repository?: IGithubRepository;\n}\n\nexport const GithubCard = ({ repositoryId, repository }: IGithubCardProps) => {\n  const [repositoryOwner, repositoryName] = useMemo(\n    () => repositoryId.split('/'),\n    [repositoryId]\n  );\n\n  const repositoryUrl = useMemo(\n    () => `https://github.com/${repositoryOwner}/${repositoryName}`,\n    [repositoryOwner, repositoryName]\n  );\n\n  const isLoading = !repository;\n\n  return (\n    <article className={styles.card}>\n      <div className={styles.body}>\n        <h4>\n          <TitleIcon />\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={repositoryUrl}>\n            <span className={styles.owner}>{repositoryOwner}</span>/\n            <span className={styles.repositoryName}>{repositoryName}</span>\n          </a>\n        </h4>\n        <p>{isLoading ? <Skeleton count={2} /> : repository.description}</p>\n      </div>\n      {isLoading ? (\n        <footer className={styles.skeleton}>\n          <Skeleton />\n        </footer>\n      ) : (\n        <footer>\n          <span className={styles.footerItem}>\n            <LanguageIcon\n              className={styles.languageIcon}\n              programingLanguage={repository.language}\n            />{' '}\n            <span itemProp=\"programmingLanguage\">{repository.language}</span>\n          </span>\n          <a\n            href={`${repository.htmlUrl}/stargazers`}\n            className={styles.footerItem}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <StarIcon /> {repository.stargazersCount}\n          </a>\n          <a\n            href={`${repository.htmlUrl}/network/members`}\n            className={styles.footerItem}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <ForksIcon /> {repository.forksCount}\n          </a>\n        </footer>\n      )}\n    </article>\n  );\n};\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames';\n\nimport { GithubCard } from '../GithubCard';\nimport { useOpenSourceProjects } from '../../hooks';\n\nimport * as styles from './GithubCardsGrid.module.css';\n\nexport interface IGithubCardsGridProps {\n  top?: number;\n  className?: string;\n}\n\nexport const GithubCardsGrid = ({ top, className }: IGithubCardsGridProps) => {\n  const { openSourceProjects, openSourceProjectsIds } =\n    useOpenSourceProjects(top);\n\n  const githubCards = useMemo(\n    () =>\n      openSourceProjectsIds.map((repositoryId, index) => {\n        const repository = openSourceProjects[index];\n\n        return (\n          <GithubCard\n            key={repositoryId}\n            repositoryId={repositoryId}\n            repository={repository}\n          />\n        );\n      }),\n    [openSourceProjectsIds, openSourceProjects]\n  );\n\n  return (\n    <div className={classNames(styles.githubCards, className)}>\n      {githubCards}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport var githubCards = \"GithubCardsGrid-module--github-cards--75d38\";","import React from 'react';\n\nimport { Section } from '../../../components';\nimport { GithubCardsGrid } from '../GithubCardsGrid';\n\nimport * as styles from './OpenSourceSection.module.css';\n\nexport const OpenSourceSection = () => (\n  <Section\n    title=\"Top Open Source Projects\"\n    footer=\"#all_open_source_projects\"\n    link=\"/open-source\"\n    className={styles.openSourceSection}\n  >\n    <GithubCardsGrid top={6} />\n  </Section>\n);\n","// extracted by mini-css-extract-plugin\nexport var openSourceSection = \"OpenSourceSection-module--open-source-section--bbab4\";","import * as React from 'react';\n\nimport { Layout, Seo } from '../components';\nimport { ProfileSection, useHomeCoverImage } from '../profile';\nimport { BlogSection } from '../blog';\nimport { OpenSourceSection } from '../open-source';\n\nimport * as pageStyles from './page.module.css';\n\nexport const Head = () => <Seo />;\n\nexport default function IndexPage() {\n  const coverImage = useHomeCoverImage();\n\n  return (\n    <Layout\n      transparent\n      className={pageStyles.pageFluid}\n      coverImage={\n        coverImage && {\n          image: coverImage,\n          alt: 'Avi Sharvit',\n        }\n      }\n    >\n      <ProfileSection />\n      <OpenSourceSection />\n      <BlogSection />\n    </Layout>\n  );\n}\n"],"names":["getDateFromName","name","year","month","day","split","Date","mapBlogPostData","data","_data$childMarkdownRe","_data$childMarkdownRe2","_data$childMarkdownRe3","_data$childMarkdownRe4","_data$childMarkdownRe5","_data$childMarkdownRe6","_data$childMarkdownRe7","title","childMarkdownRemark","frontmatter","date","url","excerpt","html","coverImage","childImageSharp","undefined","useBlogPosts","top","postFileFragments","useStaticQuery","allFile","nodes","useMemo","slice","useGetBlogPostsQuery","map","BlogPost","_ref","dateString","toDateString","dateJson","toJSON","React","className","dateTime","dangerouslySetInnerHTML","__html","BlogPostListItem","blogPost","Link","to","CoverImage","alt","image","BlogPostList","blogPosts","key","BlogSection","Section","footer","link","fetchGithubProjects","projectIds","Promise","all","projectId","async","response","fetch","repository","json","id","owner","login","fullName","full_name","description","language","htmlUrl","html_url","stargazersCount","stargazers_count","forksCount","forks_count","fork","fetchGithubProject","useOpenSourceProjects","openSourceProjects","setOpenSourceProjects","useState","error","setError","isLoading","setIsLoading","openSourceProjectsIds","_response$file","_response$file$childY","file","childYaml","open_source_projects","useOpenSourceProjectsIds","useEffect","projects","fetchData","catch","err","message","SkeletonThemeContext","defaultEnableAnimation","styleOptionsToCssProperties","baseColor","highlightColor","width","height","borderRadius","circle","direction","duration","enableAnimation","style","Skeleton","count","wrapper","Wrapper","customClassName","containerClassName","containerTestId","styleProp","originalPropsStyleOptions","_a","_b","_c","contextStyleOptions","propsStyleOptions","value","Object","entries","styleOptions","inline","elements","countCeil","Math","ceil","i","thisStyle","fractionalPart","fractionalWidth","skeletonSpan","push","el","ForksIcon","role","viewBox","version","fill","fillRule","d","StarIcon","TitleIcon","getProgramingLanguageColor","programingLanguage","LanguageIcon","classNames","backgroundColor","footerItem","GithubCard","repositoryId","repositoryOwner","repositoryName","repositoryUrl","target","rel","href","styles","itemProp","GithubCardsGrid","githubCards","index","OpenSourceSection","Head","Seo","IndexPage","useHomeCoverImage","Layout","transparent","pageStyles","ProfileSection"],"sourceRoot":""}