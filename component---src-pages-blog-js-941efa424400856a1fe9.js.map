{"version":3,"sources":["webpack:///./src/components/Blog/AllBlogPostsSection.js","webpack:///./src/pages/blog.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/SEO.js","webpack:///./src/components/Layout/Navbar/Navbar.js","webpack:///./src/components/Layout/Navbar/index.js","webpack:///./src/components/Layout/Layout.js","webpack:///./src/components/Layout/index.js","webpack:///./src/components/Layout/LayoutData.js","webpack:///./src/components/Layout/Breadcrumbs/BreadcrumbItem.js","webpack:///./src/components/Layout/Breadcrumbs/Breadcrumbs.js","webpack:///./src/components/Layout/Breadcrumbs/index.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Blog/BlogPostList/BlogPostListItem.js","webpack:///./src/components/Blog/BlogData.js","webpack:///./src/components/Blog/BlogPostList/BlogPostListData.js","webpack:///./src/components/Blog/BlogPostList/BlogPostList.js","webpack:///./src/components/Blog/BlogPostList/index.js"],"names":["AllBlogPostsSection","react_default","a","createElement","className","BlogPostList","limit","BlogPage","Layout","breadcrumbs","title","path","SEO","Blog_AllBlogPostsSection","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","m","module","exports","require","default","_ref","description","lang","meta","site","_public_static_d_2755277935_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","twitter","concat","defaultProps","Navbar","siteTitle","transparent","classNames","role","type","data-toggle","data-target","gatsby_browser_entry","to","id","children","Fragment","Layout_Navbar","length","Breadcrumbs","items","_toConsumableArray","Component","props","components_Layout_Layout","Object","assign","_856328897","BreadcrumbItem","style","margin","map","item","Breadcrumbs_BreadcrumbItem","key","ProdPageRenderer","location","pageResources","InternalPageRenderer","json","BlogPostListItem","date","excerpt","styles","article","toDateString","articleContent","readMoreButton","Date","fileToBlogPost","_ref$node","node","_ref$node$childMarkdo","childMarkdownRemark","frontmatter","formatBlogPost","_ref2","_name$split","split","year","month","day","nameWithoutDate","slice","join","getBlogPostsList","_1183512983","allFile","edges","post","BlogPostList_BlogPostListItem"],"mappings":"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","file":"component---src-pages-blog-js-941efa424400856a1fe9.js","sourcesContent":["import React from 'react';\nimport BlogPostList from './BlogPostList';\n\nconst AllBlogPostsSection = () => (\n  <div className=\"section posts-section section-blog-list section-nude\">\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-10 col-md-offset-1\">\n          <div className=\"text-center\">\n            <h2>Latest Blog Posts</h2>\n          </div>\n        </div>\n      </div>\n\n      <BlogPostList limit={1000} />\n    </div>\n  </div>\n);\n\nexport default AllBlogPostsSection;\n","import React from 'react';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport AllBlogPostsSection from '../components/Blog/AllBlogPostsSection';\n\nconst BlogPage = () => (\n  <Layout breadcrumbs={[{ title: 'Blog', path: '/blog' }]}>\n    <SEO title=\"Blog\" />\n    <AllBlogPostsSection />\n  </Layout>\n);\n\nexport default BlogPage;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`${site.siteMetadata.title} | %s`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author.twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Link } from 'gatsby';\n\nconst Navbar = ({ siteTitle, transparent }) => (\n  <nav\n    className={classNames(\n      'navbar',\n      transparent ? 'navbar-ct-transparent' : 'navbar-ct-primary'\n    )}\n    role=\"navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-header\">\n        <button\n          type=\"button\"\n          className=\"navbar-toggle\"\n          data-toggle=\"collapse\"\n          data-target=\"#navigation\"\n        >\n          <span className=\"sr-only\">Toggle navigation</span>\n          <span className=\"icon-bar\" />\n          <span className=\"icon-bar\" />\n          <span className=\"icon-bar\" />\n        </button>\n        <Link to=\"/\" className=\"navbar-brand\">\n          {siteTitle}\n        </Link>\n      </div>\n      <div className=\"collapse navbar-collapse\" id=\"navigation\">\n        <ul className=\"nav navbar-nav navbar-right\">\n          <li>\n            <Link to=\"/blog\">Blog</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/open-source\">Open Source</Link>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </nav>\n);\n\nNavbar.propTypes = {\n  siteTitle: PropTypes.string,\n  transparent: PropTypes.bool,\n};\n\nNavbar.defaultProps = {\n  siteTitle: ``,\n  transparent: false,\n};\n\nexport default Navbar;\n","import Navbar from './Navbar';\n\nexport default Navbar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Navbar from './Navbar';\nimport Breadcrumbs from './Breadcrumbs';\nimport '../../stylesheet/main.scss';\n\nconst Layout = ({ siteTitle, transparent, breadcrumbs, children }) => (\n  <>\n    <Navbar siteTitle={siteTitle} transparent={transparent} />\n    {breadcrumbs && breadcrumbs.length && (\n      <Breadcrumbs items={[{ title: siteTitle, path: '/' }, ...breadcrumbs]} />\n    )}\n    <div className=\"wrapper\">{children}</div>\n  </>\n);\n\nLayout.propTypes = {\n  transparent: PropTypes.bool,\n  siteTitle: PropTypes.string,\n  breadcrumbs: Breadcrumbs.propTypes.items,\n  children: PropTypes.node.isRequired,\n};\n\nLayout.defaultProps = {\n  siteTitle: '',\n  breadcrumbs: [],\n  transparent: false,\n};\n\nexport default Layout;\n","import React from 'react';\n\nimport { getSiteTitle } from './LayoutData';\nimport Layout from './Layout';\n\nconst Component = props => <Layout {...props} siteTitle={getSiteTitle()} />;\n\nexport default Component;\n","import { useStaticQuery, graphql } from 'gatsby';\n\nexport const getSiteTitle = () =>\n  useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `).site.siteMetadata.title;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nconst BreadcrumbItem = ({ title, path }) => (\n  <li>\n    <Link to={path}>{title}</Link>\n  </li>\n);\n\nBreadcrumbItem.propTypes = {\n  title: PropTypes.string,\n  path: PropTypes.string,\n};\n\nBreadcrumbItem.defaultProps = {\n  title: '',\n  path: '',\n};\n\nexport default BreadcrumbItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport BreadcrumbItem from './BreadcrumbItem';\n\nconst Breadcrumbs = ({ items }) => (\n  <nav className=\"breadcrumbs\">\n    <ol className=\"breadcrumb\" style={{ margin: 0 }}>\n      {items.map(item => (\n        <BreadcrumbItem key={item.path} {...item} />\n      ))}\n    </ol>\n  </nav>\n);\n\nBreadcrumbs.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      ...Breadcrumbs.propTypes,\n    })\n  ).isRequired,\n};\n\nexport default Breadcrumbs;\n","import Breadcrumbs from './Breadcrumbs';\n\nexport default Breadcrumbs;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Link } from 'gatsby';\n\nimport styles from './BlogPostListItem.module.scss';\n\nconst BlogPostListItem = ({ title, path, date, excerpt }) => (\n  <div className={styles.article}>\n    <div className=\"row\">\n      <div className=\"col-md-10 col-md-offset-1\">\n        <div className=\"text-center\">\n          <Link to={path}>\n            <h3 className={styles.title}>{title}</h3>\n          </Link>\n          <h6 className=\"title-uppercase\">{date.toDateString()}</h6>\n        </div>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-md-8 col-md-offset-2\">\n        <div className={styles.articleContent}>\n          <p>{excerpt}</p>\n          <Link\n            to={path}\n            className={classNames(\n              'btn btn-simple btn-primary',\n              styles.readMoreButton\n            )}\n          >\n            READ MORE\n          </Link>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nBlogPostListItem.propTypes = {\n  title: PropTypes.string,\n  path: PropTypes.string,\n  date: PropTypes.instanceOf(Date),\n  excerpt: PropTypes.string,\n};\n\nBlogPostListItem.defaultProps = {\n  title: '',\n  path: '',\n  date: new Date(),\n  excerpt: '',\n};\n\nexport default BlogPostListItem;\n","import { useStaticQuery, graphql } from 'gatsby';\n\nexport const getBlogPosts = () =>\n  useStaticQuery(\n    graphql`\n      {\n        allFile(\n          filter: { sourceInstanceName: { eq: \"posts\" } }\n          sort: { order: DESC, fields: name }\n          limit: 1000\n        ) {\n          edges {\n            node {\n              name\n              childMarkdownRemark {\n                excerpt\n                frontmatter {\n                  title\n                }\n              }\n            }\n          }\n        }\n      }\n    `\n  ).allFile.edges.map(fileToBlogPost);\n\nexport const fileToBlogPost = ({\n  node: {\n    name,\n    childMarkdownRemark: {\n      excerpt,\n      frontmatter: { title },\n    },\n  },\n}) => formatBlogPost({ name, title, excerpt });\n\nexport const formatBlogPost = ({ name, title, excerpt }) => {\n  const [year, month, day, ...nameWithoutDate] = name.split('-');\n  const date = new Date(`${year}-${month}-${day}`);\n\n  return {\n    title,\n    date,\n    excerpt,\n    path: `/blog/${nameWithoutDate.join('-')}`,\n  };\n};\n","import { getBlogPosts } from '../BlogData';\n\nexport const getBlogPostsList = limit => getBlogPosts().slice(0, limit);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import classNames from 'classnames';\n\nimport BlogPostListItem from './BlogPostListItem';\nimport { getBlogPostsList } from './BlogPostListData';\n// import styles from './LatestBlogPostsSection.module.scss';\n\nconst BlogPostList = ({ limit }) => (\n  <div className=\"articles\">\n    {getBlogPostsList(limit).map(post => (\n      <BlogPostListItem key={post.path} {...post} />\n    ))}\n  </div>\n);\n\nBlogPostList.propTypes = {\n  limit: PropTypes.number,\n};\n\nBlogPostList.defaultProps = {\n  limit: 1000,\n};\n\nexport default BlogPostList;\n","import BlogPostList from './BlogPostList';\n\nexport default BlogPostList;\n"],"sourceRoot":""}