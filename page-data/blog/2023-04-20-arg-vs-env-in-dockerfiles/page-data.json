{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2023-04-20-arg-vs-env-in-dockerfiles","result":{"data":{"file":{"name":"2023-04-20-arg-vs-env-in-dockerfiles","childMarkdownRemark":{"html":"<p>Docker is a powerful tool that allows you to package and deploy your applications in a consistent and reproducible way.\nWhen building a Docker image, you can use various instructions to specify the environment and configuration for your application.\nTwo of the most commonly used instructions in a Dockerfile are <strong>ARG</strong> and <strong>ENV</strong>.\nIn this blog post, we'll explore the key difference between <strong>ARG</strong> and <strong>ENV</strong> and how to use them in your Dockerfile.</p>\n<h2>ARG Instruction</h2>\n<p><strong>ARG</strong> is short for <strong>argument</strong>. It is used to define a variable that can be passed at build time to a Dockerfile.\n<strong>ARG</strong> variables are not persisted in the final image and are only used during the build process.</p>\n<p>The syntax for defining an <strong>ARG</strong> variable is as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">ARG</span> &lt;name>[=&lt;default value>]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Here, <code class=\"language-text\">&lt;name></code> is the name of the variable, and <code class=\"language-text\">&lt;default value></code> is the default value if the variable is not passed at build time.\nYou can use <strong>ARG</strong> variables to set the values of other instructions in the Dockerfile, such as <strong>ENV</strong> or <code class=\"language-text\">RUN</code>.</p>\n<h2>ENV Instruction</h2>\n<p><strong>ENV</strong> is short for <strong>environment</strong>. It is used to set environment variables that will be available in the container at runtime.\nUnlike <strong>ARG</strong> variables, <strong>ENV</strong> variables are persisted in the final image and can be used by the running application.</p>\n<p>The syntax for defining an <strong>ENV</strong> variable is as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">ENV</span> &lt;name> &lt;value></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Here, <code class=\"language-text\">&lt;name></code> is the name of the variable, and <code class=\"language-text\">&lt;value></code> is the value of the variable.\nYou can use <strong>ENV</strong> variables to pass configuration information to your application, such as database connection strings, API keys, or other settings.</p>\n<h2>The Main Difference</h2>\n<p>The key difference between <strong>ARG</strong> and <strong>ENV</strong> is that <strong>ARG</strong> variables are only available during the <strong>build process</strong>,\nwhile <strong>ENV</strong> variables are available at <strong>runtime</strong>.\nThis means that using different <strong>ARG</strong> variables will <strong>produce a new and unique image with each build</strong>,\nwhile using different <strong>ENV</strong> variables will only <strong>apply the environment on an existing image</strong>.</p>\n<p>In practical terms, this means that if you need to customize the build process and create unique images for different use cases,\nthen <strong>ARG</strong> variables are the best choice.\nOn the other hand, if you need to configure your application's environment and want to reuse the same image with different configurations,\nthen <strong>ENV</strong> variables are the way to go.</p>\n<p>Here's an example Dockerfile that demonstrates the use of <strong>ARG</strong> and <strong>ENV</strong> instructions:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Use a specific version of Node.js as a build argument</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ARG</span> NODE_VERSION=14.16.0</span>\n\n<span class=\"token comment\"># Set the Node.js version as an environment variable</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> NODE_VERSION <span class=\"token variable\">$NODE_VERSION</span></span>\n\n<span class=\"token comment\"># Install Node.js and dependencies</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:<span class=\"token variable\">$NODE_VERSION</span></span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> package*.json ./</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm install</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"npm\"</span>, <span class=\"token string\">\"start\"</span>]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we use an <strong>ARG</strong> variable to specify the version of Node.js to use during the build process. We then use an <strong>ENV</strong> variable to persist the Node.js version in the final image, which can be used by the running application. Finally, we use the <code class=\"language-text\">CMD</code> instruction to start the application using the <code class=\"language-text\">npm start</code> command.</p>\n<h2>Conclusion</h2>\n<p>When building a Docker image, it's important to understand the difference between <strong>ARG</strong> and <strong>ENV</strong>.\nUse <strong>ARG</strong> variables to set build-time configuration details, and use <strong>ENV</strong> variables to set runtime environment variables for your application.\nBy understanding the differences between these two instructions, you can create Docker images that are flexible, efficient, and easy to manage.</p>","excerpt":"Docker is a powerful tool that allows you to package and deploy your applications in a consistent and reproducible way.\nWhen building a Docker image, you can use various instructions to specify the environment and configuration for your application.\nTwo of the most commonly usedâ€¦","frontmatter":{"title":"The Difference Between ARG and ENV in a Dockerfile","coverImage":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#181828","images":{"fallback":{"src":"/static/7ecf7937ede2736972397109d4663995/b5658/2023-04-20-arg-vs-env-in-dockerfiles.png","srcSet":"/static/7ecf7937ede2736972397109d4663995/f054e/2023-04-20-arg-vs-env-in-dockerfiles.png 750w,\n/static/7ecf7937ede2736972397109d4663995/b5658/2023-04-20-arg-vs-env-in-dockerfiles.png 1024w","sizes":"100vw"},"sources":[{"srcSet":"/static/7ecf7937ede2736972397109d4663995/4f03f/2023-04-20-arg-vs-env-in-dockerfiles.webp 750w,\n/static/7ecf7937ede2736972397109d4663995/67ded/2023-04-20-arg-vs-env-in-dockerfiles.webp 1024w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}}}}}}},"pageContext":{"id":"09a643c4-1e61-5a65-b27b-17e9faf43fdf","postPath":"/blog/2023-04-20-arg-vs-env-in-dockerfiles"}},"staticQueryHashes":["1421987612","2375201890","2545220355","282316431","338777631","3904166403","400598487","472951252"]}